###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     19/Mar/2019  14:40:51 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\common\base64.c                                  #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\common\base64.c" -D BEACON_APP -D               #
#                    USE_STDPERIPH_DRIVER -D STM32F10X_CL -D COOS -D          #
#                    USE_MY_ASSERT -D BC_HW_REVJ -D _DEBUG -D BOOTLOADER -D   #
#                    EE_M24C02 -D TASKS_PROFILE -D BATTERY_CHECK -D           #
#                    CCA_EN_NO -D NEW_BEACON -D USE_TIM4 -D WDT_ENABLE -D     #
#                    OLD_CONFIG -D CIRCULAR_LOG -lcN                          #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\List\ #
#                    " -o "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Rev #
#                    J\RevJ Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\RevJ\RevJ Beacon\firmware\beacon\IAR\..\App\" -I       #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\CMSIS\CM3\Devi #
#                    ceSupport\ST\STM32F10x\" -I                              #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\STM32F10x_StdP #
#                    eriph_Driver\inc\" -I "C:\Users\User\Documents\Cortex_gi #
#                    t\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\..\.. #
#                    \common\CoOS\kernel\" -I "C:\Users\User\Documents\Cortex #
#                    _git\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\.. #
#                    \..\common\CoOS\portable\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\..\common\" -I        #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\USB-Device-CDC #
#                    \" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Re #
#                    vJ\RevJ Beacon\firmware\beacon\IAR\..\..\common\" -I     #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\" -On --use_c++_inline -I   #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\List\b #
#                    ase64.lst                                                #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\Obj\ba #
#                    se64.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ Beacon\common\base64.c
      1          #include <string.h>
      2          #include <ctype.h>
      3          
      4          #define u_char unsigned char 
      5          //#define Assert(Cond) (Cond(Cond))
      6          
      7          static const char Base64[] =
      8          	"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      9          static const char Pad64 = '=';
     10          
     11          /* (From RFC1521 and draft-ietf-dnssec-secext-03.txt)
     12             The following encoding technique is taken from RFC 1521 by Borenstein
     13             and Freed.  It is reproduced here in a slightly edited form for
     14             convenience.
     15          
     16             A 65-character subset of US-ASCII is used, enabling 6 bits to be
     17             represented per printable character. (The extra 65th character, "=",
     18             is used to signify a special processing function.)
     19          
     20             The encoding process represents 24-bit groups of input bits as output
     21             strings of 4 encoded characters. Proceeding from left to right, a
     22             24-bit input group is formed by concatenating 3 8-bit input groups.
     23             These 24 bits are then treated as 4 concatenated 6-bit groups, each
     24             of which is translated into a single digit in the base64 alphabet.
     25          
     26             Each 6-bit group is used as an index into an array of 64 printable
     27             characters. The character referenced by the index is placed in the
     28             output string.
     29          
     30                                   Table 1: The Base64 Alphabet
     31          
     32                Value Encoding  Value Encoding  Value Encoding  Value Encoding
     33                    0 A            17 R            34 i            51 z
     34                    1 B            18 S            35 j            52 0
     35                    2 C            19 T            36 k            53 1
     36                    3 D            20 U            37 l            54 2
     37                    4 E            21 V            38 m            55 3
     38                    5 F            22 W            39 n            56 4
     39                    6 G            23 X            40 o            57 5
     40                    7 H            24 Y            41 p            58 6
     41                    8 I            25 Z            42 q            59 7
     42                    9 J            26 a            43 r            60 8
     43                   10 K            27 b            44 s            61 9
     44                   11 L            28 c            45 t            62 +
     45                   12 M            29 d            46 u            63 /
     46                   13 N            30 e            47 v
     47                   14 O            31 f            48 w         (pad) =
     48                   15 P            32 g            49 x
     49                   16 Q            33 h            50 y
     50          
     51             Special processing is performed if fewer than 24 bits are available
     52             at the end of the data being encoded.  A full encoding quantum is
     53             always completed at the end of a quantity.  When fewer than 24 input
     54             bits are available in an input group, zero bits are added (on the
     55             right) to form an integral number of 6-bit groups.  Padding at the
     56             end of the data is performed using the '=' character.
     57          
     58             Since all base64 input is an integral number of octets, only the
     59                   -------------------------------------------------                       
     60             following cases can arise:
     61             
     62                 (1) the final quantum of encoding input is an integral
     63                     multiple of 24 bits; here, the final unit of encoded
     64          	   output will be an integral multiple of 4 characters
     65          	   with no "=" padding,
     66                 (2) the final quantum of encoding input is exactly 8 bits;
     67                     here, the final unit of encoded output will be two
     68          	   characters followed by two "=" padding characters, or
     69                 (3) the final quantum of encoding input is exactly 16 bits;
     70                     here, the final unit of encoded output will be three
     71          	   characters followed by one "=" padding character.
     72             */
     73          
     74          // Encode
     75          int b64_ntop(u_char const *src, size_t srclength, char *target, size_t targsize) {
     76          	size_t datalength = 0;
     77          	u_char input[3];
     78          	u_char output[4];
     79          	size_t i;
     80          
     81          	while (2 < srclength) {
     82          		input[0] = *src++;
     83          		input[1] = *src++;
     84          		input[2] = *src++;
     85          		srclength -= 3;
     86          
     87          		output[0] = input[0] >> 2;
     88          		output[1] = ((input[0] & 0x03) << 4) + (input[1] >> 4);
     89          		output[2] = ((input[1] & 0x0f) << 2) + (input[2] >> 6);
     90          		output[3] = input[2] & 0x3f;
     91          		// Assert(output[0] < 64);
     92          		// Assert(output[1] < 64);
     93          		// Assert(output[2] < 64);
     94          		// Assert(output[3] < 64);
     95          
     96          		if (datalength + 4 > targsize)
     97          			return (-1);
     98          		target[datalength++] = Base64[output[0]];
     99          		target[datalength++] = Base64[output[1]];
    100          		target[datalength++] = Base64[output[2]];
    101          		target[datalength++] = Base64[output[3]];
    102          	}
    103              
    104          	/* Now we worry about padding. */
    105          	if (0 != srclength) {
    106          		/* Get what's left. */
    107          		input[0] = input[1] = input[2] = '\0';
    108          		for (i = 0; i < srclength; i++)
    109          			input[i] = *src++;
    110          	
    111          		output[0] = input[0] >> 2;
    112          		output[1] = ((input[0] & 0x03) << 4) + (input[1] >> 4);
    113          		output[2] = ((input[1] & 0x0f) << 2) + (input[2] >> 6);
    114          		// Assert(output[0] < 64);
    115          		// Assert(output[1] < 64);
    116          		// Assert(output[2] < 64);
    117          
    118          		if (datalength + 4 > targsize)
    119          			return (-1);
    120          		target[datalength++] = Base64[output[0]];
    121          		target[datalength++] = Base64[output[1]];
    122          		if (srclength == 1)
    123          			target[datalength++] = Pad64;
    124          		else
    125          			target[datalength++] = Base64[output[2]];
    126          		target[datalength++] = Pad64;
    127          	}
    128          	if (datalength >= targsize)
    129          		return (-1);
    130          	target[datalength] = '\0';	/* Returned value doesn't count \0. */
    131          	return (datalength);
    132          }
    133          
    134          /* skips all whitespace anywhere.
    135             converts characters, four at a time, starting at (or after)
    136             src from base - 64 numbers into three 8 bit bytes in the target area.
    137             it returns the number of data bytes stored at the target, or -1 on error.
    138           */
    139          // Decode. source must be '\0' terminated 
    140          int b64_pton(char const *src, u_char *target, size_t targsize) {
    141          	int tarindex, state, ch;
    142          	const char *pos;
    143          
    144          	state = 0;
    145          	tarindex = 0;
    146          
    147          	while ((ch = *src++) != '\0') {
    148          		if (isspace(ch))	/* Skip whitespace anywhere. */
    149          			continue;
    150          
    151          		if (ch == Pad64)
    152          			break;
    153          
    154          		pos = strchr(Base64, ch);
    155          		if (pos == 0) 		/* A non-base64 character. */
    156          			return (-1);
    157          
    158          		switch (state) {
    159          		case 0:
    160          			if (target) {
    161          				if ((size_t)tarindex >= targsize)
    162          					return (-1);
    163          				target[tarindex] = (pos - Base64) << 2;
    164          			}
    165          			state = 1;
    166          			break;
    167          		case 1:
    168          			if (target) {
    169          				if ((size_t)tarindex + 1 >= targsize)
    170          					return (-1);
    171          				target[tarindex]   |=  (pos - Base64) >> 4;
    172          				target[tarindex+1]  = ((pos - Base64) & 0x0f)
    173          							<< 4 ;
    174          			}
    175          			tarindex++;
    176          			state = 2;
    177          			break;
    178          		case 2:
    179          			if (target) {
    180          				if ((size_t)tarindex + 1 >= targsize)
    181          					return (-1);
    182          				target[tarindex]   |=  (pos - Base64) >> 2;
    183          				target[tarindex+1]  = ((pos - Base64) & 0x03)
    184          							<< 6;
    185          			}
    186          			tarindex++;
    187          			state = 3;
    188          			break;
    189          		case 3:
    190          			if (target) {
    191          				if ((size_t)tarindex >= targsize)
    192          					return (-1);
    193          				target[tarindex] |= (pos - Base64);
    194          			}
    195          			tarindex++;
    196          			state = 0;
    197          			break;
    198          		default:
    199          			return -1;
    200          		}
    201          	}
    202          
    203          	/*
    204          	 * We are done decoding Base-64 chars.  Let's see if we ended
    205          	 * on a byte boundary, and/or with erroneous trailing characters.
    206          	 */
    207          
    208          	if (ch == Pad64) {		/* We got a pad char. */
    209          		ch = *src++;		/* Skip it, get next. */
    210          		switch (state) {
    211          		case 0:		/* Invalid = in first position */
    212          		case 1:		/* Invalid = in second position */
    213          			return (-1);
    214          
    215          		case 2:		/* Valid, means one byte of info */
    216          			/* Skip any number of spaces. */
    217          			for ((void)NULL; ch != '\0'; ch = *src++)
    218          				if (!isspace(ch))
    219          					break;
    220          			/* Make sure there is another trailing = sign. */
    221          			if (ch != Pad64)
    222          				return (-1);
    223          			ch = *src++;		/* Skip the = */
    224          			/* Fall through to "single trailing =" case. */
    225          			/* FALLTHROUGH */
    226          
    227          		case 3:		/* Valid, means two bytes of info */
    228          			/*
    229          			 * We know this char is an =.  Is there anything but
    230          			 * whitespace after it?
    231          			 */
    232          			for ((void)NULL; ch != '\0'; ch = *src++)
    233          				if (!isspace(ch))
    234          					return (-1);
    235          
    236          			/*
    237          			 * Now make sure for cases 2 and 3 that the "extra"
    238          			 * bits that slopped past the last full byte were
    239          			 * zeros.  If we don't check them, they become a
    240          			 * subliminal channel.
    241          			 */
    242          			if (target && target[tarindex] != 0)
    243          				return (-1);
    244          		}
    245          	} else {
    246          		/*
    247          		 * We ended by seeing the end of the string.  Make sure we
    248          		 * have no partial bytes lying around.
    249          		 */
    250          		if (state != 0)
    251          			return (-1);
    252          	}
    253          
    254          	return (tarindex);
    255          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  _LocaleC_isspace
       24  b64_ntop
       32  b64_pton
             32 -> isspace
             32 -> strchr
        8  isspace
              8 -> _LocaleC_isspace
       16  strchr
             16 -> __iar_Strchr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      68  Base64
       1  Pad64
      22  _LocaleC_isspace
     366  b64_ntop
     410  b64_pton
      12  isspace
      16  strchr

 
  69 bytes in section .rodata
 834 bytes in section .text
 
 784 bytes of CODE  memory (+ 50 bytes shared)
  69 bytes of CONST memory

Errors: none
Warnings: none
