###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     19/Mar/2019  14:40:55 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\common\STM32F10x_StdPeriph_Driver\src\s #
#                    tm32f10x_dac.c                                           #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\common\STM32F10x_StdPeriph_Driver\src\ #
#                    stm32f10x_dac.c" -D BEACON_APP -D USE_STDPERIPH_DRIVER   #
#                    -D STM32F10X_CL -D COOS -D USE_MY_ASSERT -D BC_HW_REVJ   #
#                    -D _DEBUG -D BOOTLOADER -D EE_M24C02 -D TASKS_PROFILE    #
#                    -D BATTERY_CHECK -D CCA_EN_NO -D NEW_BEACON -D USE_TIM4  #
#                    -D WDT_ENABLE -D OLD_CONFIG -D CIRCULAR_LOG -lcN         #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\List\ #
#                    " -o "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Rev #
#                    J\RevJ Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\ #
#                    Obj\" --no_cse --no_unroll --no_inline --no_code_motion  #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\RevJ\RevJ Beacon\firmware\beacon\IAR\..\App\" -I       #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\CMSIS\CM3\Devi #
#                    ceSupport\ST\STM32F10x\" -I                              #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\STM32F10x_StdP #
#                    eriph_Driver\inc\" -I "C:\Users\User\Documents\Cortex_gi #
#                    t\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\..\.. #
#                    \common\CoOS\kernel\" -I "C:\Users\User\Documents\Cortex #
#                    _git\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\.. #
#                    \..\common\CoOS\portable\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\..\common\" -I        #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\USB-Device-CDC #
#                    \" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Re #
#                    vJ\RevJ Beacon\firmware\beacon\IAR\..\..\common\" -I     #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\" -On --use_c++_inline -I   #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\List\s #
#                    tm32f10x_dac.lst                                         #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader-RevJ\Obj\st #
#                    m32f10x_dac.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ Beacon\firmware\common\STM32F10x_StdPeriph_Driver\src\stm32f10x_dac.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_dac.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the DAC firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_dac.h"
     24          #include "stm32f10x_rcc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup DAC 
     31            * @brief DAC driver modules
     32            * @{
     33            */
     34          
     35          /** @defgroup DAC_Private_TypesDefinitions
     36            * @{
     37            */
     38          
     39          /**
     40            * @}
     41            */
     42          
     43          /** @defgroup DAC_Private_Defines
     44            * @{
     45            */
     46          
     47          /* CR register Mask */
     48          #define CR_CLEAR_MASK              ((uint32_t)0x00000FFE)
     49          
     50          /* DAC Dual Channels SWTRIG masks */
     51          #define DUAL_SWTRIG_SET            ((uint32_t)0x00000003)
     52          #define DUAL_SWTRIG_RESET          ((uint32_t)0xFFFFFFFC)
     53          
     54          /* DHR registers offsets */
     55          #define DHR12R1_OFFSET             ((uint32_t)0x00000008)
     56          #define DHR12R2_OFFSET             ((uint32_t)0x00000014)
     57          #define DHR12RD_OFFSET             ((uint32_t)0x00000020)
     58          
     59          /* DOR register offset */
     60          #define DOR_OFFSET                 ((uint32_t)0x0000002C)
     61          /**
     62            * @}
     63            */
     64          
     65          /** @defgroup DAC_Private_Macros
     66            * @{
     67            */
     68          
     69          /**
     70            * @}
     71            */
     72          
     73          /** @defgroup DAC_Private_Variables
     74            * @{
     75            */
     76          
     77          /**
     78            * @}
     79            */
     80          
     81          /** @defgroup DAC_Private_FunctionPrototypes
     82            * @{
     83            */
     84          
     85          /**
     86            * @}
     87            */
     88          
     89          /** @defgroup DAC_Private_Functions
     90            * @{
     91            */
     92          
     93          /**
     94            * @brief  Deinitializes the DAC peripheral registers to their default reset values.
     95            * @param  None
     96            * @retval None
     97            */
     98          void DAC_DeInit(void) {
     99              /* Enable DAC reset state */
    100              RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
    101              /* Release DAC from reset state */
    102              RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
    103          }
    104          
    105          /**
    106            * @brief  Initializes the DAC peripheral according to the specified 
    107            *         parameters in the DAC_InitStruct.
    108            * @param  DAC_Channel: the selected DAC channel. 
    109            *   This parameter can be one of the following values:
    110            *     @arg DAC_Channel_1: DAC Channel1 selected
    111            *     @arg DAC_Channel_2: DAC Channel2 selected
    112            * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
    113            *        contains the configuration information for the specified DAC channel.
    114            * @retval None
    115            */
    116          void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef *DAC_InitStruct) {
    117              uint32_t tmpreg1 = 0, tmpreg2 = 0;
    118              /* Check the DAC parameters */
    119              assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
    120              assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
    121              assert_param(
    122                  IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
    123              assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
    124              /*---------------------------- DAC CR Configuration --------------------------*/
    125              /* Get the DAC CR value */
    126              tmpreg1 = DAC->CR;
    127              /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
    128              tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
    129              /* Configure for the selected DAC channel: buffer output, trigger, wave generation,
    130                 mask/amplitude for wave generation */
    131              /* Set TSELx and TENx bits according to DAC_Trigger value */
    132              /* Set WAVEx bits according to DAC_WaveGeneration value */
    133              /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */
    134              /* Set BOFFx bit according to DAC_OutputBuffer value */
    135              tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration
    136                  | DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    137              /* Calculate CR register value depending on DAC_Channel */
    138              tmpreg1 |= tmpreg2 << DAC_Channel;
    139              /* Write to DAC CR */
    140              DAC->CR = tmpreg1;
    141          }
    142          
    143          /**
    144            * @brief  Fills each DAC_InitStruct member with its default value.
    145            * @param  DAC_InitStruct : pointer to a DAC_InitTypeDef structure which will
    146            *         be initialized.
    147            * @retval None
    148            */
    149          void DAC_StructInit(DAC_InitTypeDef *DAC_InitStruct) {
    150              /*--------------- Reset DAC init structure parameters values -----------------*/
    151              /* Initialize the DAC_Trigger member */
    152              DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
    153              /* Initialize the DAC_WaveGeneration member */
    154              DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
    155              /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
    156              DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
    157              /* Initialize the DAC_OutputBuffer member */
    158              DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    159          }
    160          
    161          /**
    162            * @brief  Enables or disables the specified DAC channel.
    163            * @param  DAC_Channel: the selected DAC channel. 
    164            *   This parameter can be one of the following values:
    165            *     @arg DAC_Channel_1: DAC Channel1 selected
    166            *     @arg DAC_Channel_2: DAC Channel2 selected
    167            * @param  NewState: new state of the DAC channel. 
    168            *   This parameter can be: ENABLE or DISABLE.
    169            * @retval None
    170            */
    171          void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState) {
    172              /* Check the parameters */
    173              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    174              assert_param(IS_FUNCTIONAL_STATE(NewState));
    175          
    176              if (NewState != DISABLE) {
    177                  /* Enable the selected DAC channel */
    178                  DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
    179              } else {
    180                  /* Disable the selected DAC channel */
    181                  DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
    182              }
    183          }
    184          #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    185          /**
    186            * @brief  Enables or disables the specified DAC interrupts.
    187            * @param  DAC_Channel: the selected DAC channel. 
    188            *   This parameter can be one of the following values:
    189            *     @arg DAC_Channel_1: DAC Channel1 selected
    190            *     @arg DAC_Channel_2: DAC Channel2 selected
    191            * @param  DAC_IT: specifies the DAC interrupt sources to be enabled or disabled. 
    192            *   This parameter can be the following values:
    193            *     @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                      
    194            * @param  NewState: new state of the specified DAC interrupts.
    195            *   This parameter can be: ENABLE or DISABLE.
    196            * @retval None
    197            */
    198          
    199          void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState) {
    200              /* Check the parameters */
    201              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    202              assert_param(IS_FUNCTIONAL_STATE(NewState));
    203              assert_param(IS_DAC_IT(DAC_IT));
    204          
    205              if (NewState != DISABLE) {
    206                  /* Enable the selected DAC interrupts */
    207                  DAC->CR |= (DAC_IT << DAC_Channel);
    208              } else {
    209                  /* Disable the selected DAC interrupts */
    210                  DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
    211              }
    212          }
    213          #endif
    214          
    215          /**
    216            * @brief  Enables or disables the specified DAC channel DMA request.
    217            * @param  DAC_Channel: the selected DAC channel. 
    218            *   This parameter can be one of the following values:
    219            *     @arg DAC_Channel_1: DAC Channel1 selected
    220            *     @arg DAC_Channel_2: DAC Channel2 selected
    221            * @param  NewState: new state of the selected DAC channel DMA request.
    222            *   This parameter can be: ENABLE or DISABLE.
    223            * @retval None
    224            */
    225          
    226          void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState) {
    227              /* Check the parameters */
    228              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    229              assert_param(IS_FUNCTIONAL_STATE(NewState));
    230          
    231              if (NewState != DISABLE) {
    232                  /* Enable the selected DAC channel DMA request */
    233                  DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
    234              } else {
    235                  /* Disable the selected DAC channel DMA request */
    236                  DAC->CR &= ~(DAC_CR_DMAEN1 << DAC_Channel);
    237              }
    238          }
    239          
    240          /**
    241            * @brief  Enables or disables the selected DAC channel software trigger.
    242            * @param  DAC_Channel: the selected DAC channel. 
    243            *   This parameter can be one of the following values:
    244            *     @arg DAC_Channel_1: DAC Channel1 selected
    245            *     @arg DAC_Channel_2: DAC Channel2 selected
    246            * @param  NewState: new state of the selected DAC channel software trigger.
    247            *   This parameter can be: ENABLE or DISABLE.
    248            * @retval None
    249            */
    250          void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState) {
    251              /* Check the parameters */
    252              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    253              assert_param(IS_FUNCTIONAL_STATE(NewState));
    254          
    255              if (NewState != DISABLE) {
    256                  /* Enable software trigger for the selected DAC channel */
    257                  DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
    258              } else {
    259                  /* Disable software trigger for the selected DAC channel */
    260                  DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
    261              }
    262          }
    263          
    264          /**
    265            * @brief  Enables or disables simultaneously the two DAC channels software
    266            *   triggers.
    267            * @param  NewState: new state of the DAC channels software triggers.
    268            *   This parameter can be: ENABLE or DISABLE.
    269            * @retval None
    270            */
    271          void DAC_DualSoftwareTriggerCmd(FunctionalState NewState) {
    272              /* Check the parameters */
    273              assert_param(IS_FUNCTIONAL_STATE(NewState));
    274          
    275              if (NewState != DISABLE) {
    276                  /* Enable software trigger for both DAC channels */
    277                  DAC->SWTRIGR |= DUAL_SWTRIG_SET;
    278              } else {
    279                  /* Disable software trigger for both DAC channels */
    280                  DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
    281              }
    282          }
    283          
    284          /**
    285            * @brief  Enables or disables the selected DAC channel wave generation.
    286            * @param  DAC_Channel: the selected DAC channel. 
    287            *   This parameter can be one of the following values:
    288            *     @arg DAC_Channel_1: DAC Channel1 selected
    289            *     @arg DAC_Channel_2: DAC Channel2 selected
    290            * @param  DAC_Wave: Specifies the wave type to enable or disable.
    291            *   This parameter can be one of the following values:
    292            *     @arg DAC_Wave_Noise: noise wave generation
    293            *     @arg DAC_Wave_Triangle: triangle wave generation
    294            * @param  NewState: new state of the selected DAC channel wave generation.
    295            *   This parameter can be: ENABLE or DISABLE.
    296            * @retval None
    297            */
    298          void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState) {
    299              /* Check the parameters */
    300              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    301              assert_param(IS_DAC_WAVE(DAC_Wave));
    302              assert_param(IS_FUNCTIONAL_STATE(NewState));
    303          
    304              if (NewState != DISABLE) {
    305                  /* Enable the selected wave generation for the selected DAC channel */
    306                  DAC->CR |= DAC_Wave << DAC_Channel;
    307              } else {
    308                  /* Disable the selected wave generation for the selected DAC channel */
    309                  DAC->CR &= ~(DAC_Wave << DAC_Channel);
    310              }
    311          }
    312          
    313          /**
    314            * @brief  Set the specified data holding register value for DAC channel1.
    315            * @param  DAC_Align: Specifies the data alignment for DAC channel1.
    316            *   This parameter can be one of the following values:
    317            *     @arg DAC_Align_8b_R: 8bit right data alignment selected
    318            *     @arg DAC_Align_12b_L: 12bit left data alignment selected
    319            *     @arg DAC_Align_12b_R: 12bit right data alignment selected
    320            * @param  Data : Data to be loaded in the selected data holding register.
    321            * @retval None
    322            */
    323          void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data) {
    324              __IO uint32_t tmp = 0;
    325          
    326              /* Check the parameters */
    327              assert_param(IS_DAC_ALIGN(DAC_Align));
    328              assert_param(IS_DAC_DATA(Data));
    329          
    330              tmp = (uint32_t)DAC_BASE;
    331              tmp += DHR12R1_OFFSET + DAC_Align;
    332          
    333              /* Set the DAC channel1 selected data holding register */
    334              *(__IO uint32_t *)tmp = Data;
    335          }
    336          
    337          /**
    338            * @brief  Set the specified data holding register value for DAC channel2.
    339            * @param  DAC_Align: Specifies the data alignment for DAC channel2.
    340            *   This parameter can be one of the following values:
    341            *     @arg DAC_Align_8b_R: 8bit right data alignment selected
    342            *     @arg DAC_Align_12b_L: 12bit left data alignment selected
    343            *     @arg DAC_Align_12b_R: 12bit right data alignment selected
    344            * @param  Data : Data to be loaded in the selected data holding register.
    345            * @retval None
    346            */
    347          void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data) {
    348              __IO uint32_t tmp = 0;
    349          
    350              /* Check the parameters */
    351              assert_param(IS_DAC_ALIGN(DAC_Align));
    352              assert_param(IS_DAC_DATA(Data));
    353          
    354              tmp = (uint32_t)DAC_BASE;
    355              tmp += DHR12R2_OFFSET + DAC_Align;
    356          
    357              /* Set the DAC channel2 selected data holding register */
    358              *(__IO uint32_t *)tmp = Data;
    359          }
    360          
    361          /**
    362            * @brief  Set the specified data holding register value for dual channel
    363            *   DAC.
    364            * @param  DAC_Align: Specifies the data alignment for dual channel DAC.
    365            *   This parameter can be one of the following values:
    366            *     @arg DAC_Align_8b_R: 8bit right data alignment selected
    367            *     @arg DAC_Align_12b_L: 12bit left data alignment selected
    368            *     @arg DAC_Align_12b_R: 12bit right data alignment selected
    369            * @param  Data2: Data for DAC Channel2 to be loaded in the selected data 
    370            *   holding register.
    371            * @param  Data1: Data for DAC Channel1 to be loaded in the selected data 
    372            *   holding register.
    373            * @retval None
    374            */
    375          void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1) {
    376              uint32_t data = 0, tmp = 0;
    377          
    378              /* Check the parameters */
    379              assert_param(IS_DAC_ALIGN(DAC_Align));
    380              assert_param(IS_DAC_DATA(Data1));
    381              assert_param(IS_DAC_DATA(Data2));
    382          
    383              /* Calculate and set dual DAC data holding register value */
    384              if (DAC_Align == DAC_Align_8b_R) {
    385                  data = ((uint32_t)Data2 << 8) | Data1;
    386              } else {
    387                  data = ((uint32_t)Data2 << 16) | Data1;
    388              }
    389          
    390              tmp = (uint32_t)DAC_BASE;
    391              tmp += DHR12RD_OFFSET + DAC_Align;
    392          
    393              /* Set the dual DAC selected data holding register */
    394              *(__IO uint32_t *)tmp = data;
    395          }
    396          
    397          /**
    398            * @brief  Returns the last data output value of the selected DAC channel.
    399            * @param  DAC_Channel: the selected DAC channel. 
    400            *   This parameter can be one of the following values:
    401            *     @arg DAC_Channel_1: DAC Channel1 selected
    402            *     @arg DAC_Channel_2: DAC Channel2 selected
    403            * @retval The selected DAC channel data output value.
    404            */
    405          uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel) {
    406              __IO uint32_t tmp = 0;
    407          
    408              /* Check the parameters */
    409              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    410          
    411              tmp = (uint32_t)DAC_BASE;
    412              tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
    413          
    414              /* Returns the DAC channel data output register value */
    415              return (uint16_t)(*(__IO uint32_t *)tmp);
    416          }
    417          
    418          #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    419          /**
    420            * @brief  Checks whether the specified DAC flag is set or not.
    421            * @param  DAC_Channel: thee selected DAC channel. 
    422            *   This parameter can be one of the following values:
    423            *     @arg DAC_Channel_1: DAC Channel1 selected
    424            *     @arg DAC_Channel_2: DAC Channel2 selected
    425            * @param  DAC_FLAG: specifies the flag to check. 
    426            *   This parameter can be only of the following value:
    427            *     @arg DAC_FLAG_DMAUDR: DMA underrun flag                                                 
    428            * @retval The new state of DAC_FLAG (SET or RESET).
    429            */
    430          
    431          FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG) {
    432              FlagStatus bitstatus = RESET;
    433              /* Check the parameters */
    434              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    435              assert_param(IS_DAC_FLAG(DAC_FLAG));
    436          
    437              /* Check the status of the specified DAC flag */
    438              if ((DAC->SR &(DAC_FLAG << DAC_Channel)) != (uint8_t)RESET) {
    439                  /* DAC_FLAG is set */
    440                  bitstatus = SET;
    441              } else {
    442                  /* DAC_FLAG is reset */
    443                  bitstatus = RESET;
    444              }
    445              /* Return the DAC_FLAG status */
    446              return bitstatus;
    447          }
    448          
    449          /**
    450            * @brief  Clears the DAC channelx's pending flags.
    451            * @param  DAC_Channel: the selected DAC channel. 
    452            *   This parameter can be one of the following values:
    453            *     @arg DAC_Channel_1: DAC Channel1 selected
    454            *     @arg DAC_Channel_2: DAC Channel2 selected
    455            * @param  DAC_FLAG: specifies the flag to clear. 
    456            *   This parameter can be of the following value:
    457            *     @arg DAC_FLAG_DMAUDR: DMA underrun flag                           
    458            * @retval None
    459            */
    460          void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG) {
    461              /* Check the parameters */
    462              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    463              assert_param(IS_DAC_FLAG(DAC_FLAG));
    464          
    465              /* Clear the selected DAC flags */
    466              DAC->SR = (DAC_FLAG << DAC_Channel);
    467          }
    468          
    469          /**
    470            * @brief  Checks whether the specified DAC interrupt has occurred or not.
    471            * @param  DAC_Channel: the selected DAC channel. 
    472            *   This parameter can be one of the following values:
    473            *     @arg DAC_Channel_1: DAC Channel1 selected
    474            *     @arg DAC_Channel_2: DAC Channel2 selected
    475            * @param  DAC_IT: specifies the DAC interrupt source to check. 
    476            *   This parameter can be the following values:
    477            *     @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                       
    478            * @retval The new state of DAC_IT (SET or RESET).
    479            */
    480          ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT) {
    481              ITStatus bitstatus = RESET;
    482              uint32_t enablestatus = 0;
    483          
    484              /* Check the parameters */
    485              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    486              assert_param(IS_DAC_IT(DAC_IT));
    487          
    488              /* Get the DAC_IT enable bit status */
    489              enablestatus = (DAC->CR &(DAC_IT << DAC_Channel));
    490          
    491              /* Check the status of the specified DAC interrupt */
    492              if (((DAC->SR &(DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus) {
    493                  /* DAC_IT is set */
    494                  bitstatus = SET;
    495              } else {
    496                  /* DAC_IT is reset */
    497                  bitstatus = RESET;
    498              }
    499              /* Return the DAC_IT status */
    500              return bitstatus;
    501          }
    502          
    503          /**
    504            * @brief  Clears the DAC channelx's interrupt pending bits.
    505            * @param  DAC_Channel: the selected DAC channel. 
    506            *   This parameter can be one of the following values:
    507            *     @arg DAC_Channel_1: DAC Channel1 selected
    508            *     @arg DAC_Channel_2: DAC Channel2 selected
    509            * @param  DAC_IT: specifies the DAC interrupt pending bit to clear.
    510            *   This parameter can be the following values:
    511            *     @arg DAC_IT_DMAUDR: DMA underrun interrupt mask                         
    512            * @retval None
    513            */
    514          void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT) {
    515              /* Check the parameters */
    516              assert_param(IS_DAC_CHANNEL(DAC_Channel));
    517              assert_param(IS_DAC_IT(DAC_IT));
    518          
    519              /* Clear the selected DAC interrupt pending bits */
    520              DAC->SR = (DAC_IT << DAC_Channel);
    521          }
    522          
    523          #endif
    524          
    525          /**
    526            * @}
    527            */
    528          
    529          /**
    530            * @}
    531            */
    532          
    533          /**
    534            * @}
    535            */
    536          
    537          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  DAC_Cmd
        0  DAC_DMACmd
        8  DAC_DeInit
             8 -> RCC_APB1PeriphResetCmd
        0  DAC_DualSoftwareTriggerCmd
        4  DAC_GetDataOutputValue
        8  DAC_Init
        4  DAC_SetChannel1Data
        4  DAC_SetChannel2Data
        8  DAC_SetDualChannelData
        4  DAC_SoftwareTriggerCmd
        0  DAC_StructInit
        4  DAC_WaveGenerationCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
      38  DAC_Cmd
      42  DAC_DMACmd
      24  DAC_DeInit
      34  DAC_DualSoftwareTriggerCmd
      32  DAC_GetDataOutputValue
      50  DAC_Init
      30  DAC_SetChannel1Data
      30  DAC_SetChannel2Data
      48  DAC_SetDualChannelData
      46  DAC_SoftwareTriggerCmd
      18  DAC_StructInit
      42  DAC_WaveGenerationCmd

 
 442 bytes in section .text
 
 442 bytes of CODE memory

Errors: none
Warnings: none
