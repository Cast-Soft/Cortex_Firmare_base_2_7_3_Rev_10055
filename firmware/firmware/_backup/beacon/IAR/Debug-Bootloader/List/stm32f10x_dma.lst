###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     19/Mar/2019  16:48:08 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\common\STM32F10x_StdPeriph_Driver\src\s #
#                    tm32f10x_dma.c                                           #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\common\STM32F10x_StdPeriph_Driver\src\ #
#                    stm32f10x_dma.c" -D BEACON_APP -D USE_STDPERIPH_DRIVER   #
#                    -D STM32F10X_CL -D COOS -D USE_MY_ASSERT -D BC_HW_REVJ   #
#                    -D _DEBUG -D BOOTLOADER -D EE_M24C02 -D TASKS_PROFILE    #
#                    -D BATTERY_CHECK -D CCA_EN_NO -D NEW_BEACON -D USE_TIM4  #
#                    -D WDT_ENABLE -D OLD_CONFIG -D CIRCULAR_LOG -lcN         #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\Debug-Bootloader\List\" -o  #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\Debug-Bootloader\Obj\"      #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\RevJ\RevJ Beacon\firmware\beacon\IAR\..\App\" -I       #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\CMSIS\CM3\Devi #
#                    ceSupport\ST\STM32F10x\" -I                              #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\STM32F10x_StdP #
#                    eriph_Driver\inc\" -I "C:\Users\User\Documents\Cortex_gi #
#                    t\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\..\.. #
#                    \common\CoOS\kernel\" -I "C:\Users\User\Documents\Cortex #
#                    _git\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\.. #
#                    \..\common\CoOS\portable\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\..\common\" -I        #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\USB-Device-CDC #
#                    \" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Re #
#                    vJ\RevJ Beacon\firmware\beacon\IAR\..\..\common\" -I     #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\" -On --use_c++_inline -I   #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader\List\stm32f #
#                    10x_dma.lst                                              #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader\Obj\stm32f1 #
#                    0x_dma.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ Beacon\firmware\common\STM32F10x_StdPeriph_Driver\src\stm32f10x_dma.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_dma.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the DMA firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_dma.h"
     24          #include "stm32f10x_rcc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup DMA 
     31            * @brief DMA driver modules
     32            * @{
     33            */
     34          
     35          /** @defgroup DMA_Private_TypesDefinitions
     36            * @{
     37            */
     38          /**
     39            * @}
     40            */
     41          
     42          /** @defgroup DMA_Private_Defines
     43            * @{
     44            */
     45          
     46          /* DMA1 Channelx interrupt pending bit masks */
     47          #define DMA1_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR_TEIF1))
     48          #define DMA1_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR_TEIF2))
     49          #define DMA1_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR_TEIF3))
     50          #define DMA1_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR_TEIF4))
     51          #define DMA1_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR_TEIF5))
     52          #define DMA1_Channel6_IT_Mask    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR_TEIF6))
     53          #define DMA1_Channel7_IT_Mask    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR_TEIF7))
     54          
     55          /* DMA2 Channelx interrupt pending bit masks */
     56          #define DMA2_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR_TEIF1))
     57          #define DMA2_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR_TEIF2))
     58          #define DMA2_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR_TEIF3))
     59          #define DMA2_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR_TEIF4))
     60          #define DMA2_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR_TEIF5))
     61          
     62          /* DMA2 FLAG mask */
     63          #define FLAG_Mask                ((uint32_t)0x10000000)
     64          
     65          /* DMA registers Masks */
     66          #define CCR_CLEAR_Mask           ((uint32_t)0xFFFF800F)
     67          
     68          /**
     69            * @}
     70            */
     71          
     72          /** @defgroup DMA_Private_Macros
     73            * @{
     74            */
     75          
     76          /**
     77            * @}
     78            */
     79          
     80          /** @defgroup DMA_Private_Variables
     81            * @{
     82            */
     83          
     84          /**
     85            * @}
     86            */
     87          
     88          /** @defgroup DMA_Private_FunctionPrototypes
     89            * @{
     90            */
     91          
     92          /**
     93            * @}
     94            */
     95          
     96          /** @defgroup DMA_Private_Functions
     97            * @{
     98            */
     99          
    100          /**
    101            * @brief  Deinitializes the DMAy Channelx registers to their default reset
    102            *         values.
    103            * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
    104            *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
    105            * @retval None
    106            */
    107          
    108          void DMA_DeInit(DMA_Channel_TypeDef *DMAy_Channelx) {
    109              /* Check the parameters */
    110              assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
    111          
    112              /* Disable the selected DMAy Channelx */
    113              DMAy_Channelx->CCR &= (uint16_t)( ~DMA_CCR1_EN);
    114          
    115              /* Reset DMAy Channelx control register */
    116              DMAy_Channelx->CCR = 0;
    117          
    118              /* Reset DMAy Channelx remaining bytes register */
    119              DMAy_Channelx->CNDTR = 0;
    120          
    121              /* Reset DMAy Channelx peripheral address register */
    122              DMAy_Channelx->CPAR = 0;
    123          
    124              /* Reset DMAy Channelx memory address register */
    125              DMAy_Channelx->CMAR = 0;
    126          
    127              if (DMAy_Channelx == DMA1_Channel1) {
    128                  /* Reset interrupt pending bits for DMA1 Channel1 */
    129                  DMA1->IFCR |= DMA1_Channel1_IT_Mask;
    130              } else if (DMAy_Channelx == DMA1_Channel2) {
    131                  /* Reset interrupt pending bits for DMA1 Channel2 */
    132                  DMA1->IFCR |= DMA1_Channel2_IT_Mask;
    133              } else if (DMAy_Channelx == DMA1_Channel3) {
    134                  /* Reset interrupt pending bits for DMA1 Channel3 */
    135                  DMA1->IFCR |= DMA1_Channel3_IT_Mask;
    136              } else if (DMAy_Channelx == DMA1_Channel4) {
    137                  /* Reset interrupt pending bits for DMA1 Channel4 */
    138                  DMA1->IFCR |= DMA1_Channel4_IT_Mask;
    139              } else if (DMAy_Channelx == DMA1_Channel5) {
    140                  /* Reset interrupt pending bits for DMA1 Channel5 */
    141                  DMA1->IFCR |= DMA1_Channel5_IT_Mask;
    142              } else if (DMAy_Channelx == DMA1_Channel6) {
    143                  /* Reset interrupt pending bits for DMA1 Channel6 */
    144                  DMA1->IFCR |= DMA1_Channel6_IT_Mask;
    145              } else if (DMAy_Channelx == DMA1_Channel7) {
    146                  /* Reset interrupt pending bits for DMA1 Channel7 */
    147                  DMA1->IFCR |= DMA1_Channel7_IT_Mask;
    148              } else if (DMAy_Channelx == DMA2_Channel1) {
    149                  /* Reset interrupt pending bits for DMA2 Channel1 */
    150                  DMA2->IFCR |= DMA2_Channel1_IT_Mask;
    151              } else if (DMAy_Channelx == DMA2_Channel2) {
    152                  /* Reset interrupt pending bits for DMA2 Channel2 */
    153                  DMA2->IFCR |= DMA2_Channel2_IT_Mask;
    154              } else if (DMAy_Channelx == DMA2_Channel3) {
    155                  /* Reset interrupt pending bits for DMA2 Channel3 */
    156                  DMA2->IFCR |= DMA2_Channel3_IT_Mask;
    157              } else if (DMAy_Channelx == DMA2_Channel4) {
    158                  /* Reset interrupt pending bits for DMA2 Channel4 */
    159                  DMA2->IFCR |= DMA2_Channel4_IT_Mask;
    160              } else {
    161                  if (DMAy_Channelx == DMA2_Channel5) {
    162                      /* Reset interrupt pending bits for DMA2 Channel5 */
    163                      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    164                  }
    165              }
    166          }
    167          
    168          /**
    169            * @brief  Initializes the DMAy Channelx according to the specified
    170            *         parameters in the DMA_InitStruct.
    171            * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
    172            *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
    173            * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
    174            *         contains the configuration information for the specified DMA Channel.
    175            * @retval None
    176            */
    177          void DMA_Init(DMA_Channel_TypeDef *DMAy_Channelx, DMA_InitTypeDef *DMA_InitStruct) {
    178              uint32_t tmpreg = 0;
    179          
    180              /* Check the parameters */
    181              assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
    182              assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
    183              assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
    184              assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
    185              assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
    186              assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
    187              assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
    188              assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
    189              assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
    190              assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
    191          
    192              /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
    193              /* Get the DMAy_Channelx CCR value */
    194              tmpreg = DMAy_Channelx->CCR;
    195              /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
    196              tmpreg &= CCR_CLEAR_Mask;
    197              /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
    198              /* Set DIR bit according to DMA_DIR value */
    199              /* Set CIRC bit according to DMA_Mode value */
    200              /* Set PINC bit according to DMA_PeripheralInc value */
    201              /* Set MINC bit according to DMA_MemoryInc value */
    202              /* Set PSIZE bits according to DMA_PeripheralDataSize value */
    203              /* Set MSIZE bits according to DMA_MemoryDataSize value */
    204              /* Set PL bits according to DMA_Priority value */
    205              /* Set the MEM2MEM bit according to DMA_M2M value */
    206              tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_PeripheralInc
    207                  | DMA_InitStruct->DMA_MemoryInc | DMA_InitStruct->DMA_PeripheralDataSize
    208                  | DMA_InitStruct->DMA_MemoryDataSize | DMA_InitStruct->DMA_Priority
    209                  | DMA_InitStruct->DMA_M2M;
    210          
    211              /* Write to DMAy Channelx CCR */
    212              DMAy_Channelx->CCR = tmpreg;
    213          
    214              /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
    215              /* Write to DMAy Channelx CNDTR */
    216              DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
    217          
    218              /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
    219              /* Write to DMAy Channelx CPAR */
    220              DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
    221          
    222              /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
    223              /* Write to DMAy Channelx CMAR */
    224              DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
    225          }
    226          
    227          /**
    228            * @brief  Fills each DMA_InitStruct member with its default value.
    229            * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
    230            *         be initialized.
    231            * @retval None
    232            */
    233          void DMA_StructInit(DMA_InitTypeDef *DMA_InitStruct) {
    234              /*-------------- Reset DMA init structure parameters values ------------------*/
    235              /* Initialize the DMA_PeripheralBaseAddr member */
    236              DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
    237              /* Initialize the DMA_MemoryBaseAddr member */
    238              DMA_InitStruct->DMA_MemoryBaseAddr = 0;
    239              /* Initialize the DMA_DIR member */
    240              DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
    241              /* Initialize the DMA_BufferSize member */
    242              DMA_InitStruct->DMA_BufferSize = 0;
    243              /* Initialize the DMA_PeripheralInc member */
    244              DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    245              /* Initialize the DMA_MemoryInc member */
    246              DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
    247              /* Initialize the DMA_PeripheralDataSize member */
    248              DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    249              /* Initialize the DMA_MemoryDataSize member */
    250              DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    251              /* Initialize the DMA_Mode member */
    252              DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
    253              /* Initialize the DMA_Priority member */
    254              DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
    255              /* Initialize the DMA_M2M member */
    256              DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
    257          }
    258          
    259          /**
    260            * @brief  Enables or disables the specified DMAy Channelx.
    261            * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
    262            *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
    263            * @param  NewState: new state of the DMAy Channelx. 
    264            *   This parameter can be: ENABLE or DISABLE.
    265            * @retval None
    266            */
    267          void DMA_Cmd(DMA_Channel_TypeDef *DMAy_Channelx, FunctionalState NewState) {
    268              /* Check the parameters */
    269              assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
    270              assert_param(IS_FUNCTIONAL_STATE(NewState));
    271          
    272              if (NewState != DISABLE) {
    273                  /* Enable the selected DMAy Channelx */
    274                  DMAy_Channelx->CCR |= DMA_CCR1_EN;
    275              } else {
    276                  /* Disable the selected DMAy Channelx */
    277                  DMAy_Channelx->CCR &= (uint16_t)( ~DMA_CCR1_EN);
    278              }
    279          }
    280          
    281          /**
    282            * @brief  Enables or disables the specified DMAy Channelx interrupts.
    283            * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
    284            *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
    285            * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
    286            *   or disabled. 
    287            *   This parameter can be any combination of the following values:
    288            *     @arg DMA_IT_TC:  Transfer complete interrupt mask
    289            *     @arg DMA_IT_HT:  Half transfer interrupt mask
    290            *     @arg DMA_IT_TE:  Transfer error interrupt mask
    291            * @param  NewState: new state of the specified DMA interrupts.
    292            *   This parameter can be: ENABLE or DISABLE.
    293            * @retval None
    294            */
    295          void DMA_ITConfig(DMA_Channel_TypeDef *DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState) {
    296              /* Check the parameters */
    297              assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
    298              assert_param(IS_DMA_CONFIG_IT(DMA_IT));
    299              assert_param(IS_FUNCTIONAL_STATE(NewState));
    300          
    301              if (NewState != DISABLE) {
    302                  /* Enable the selected DMA interrupts */
    303                  DMAy_Channelx->CCR |= DMA_IT;
    304              } else {
    305                  /* Disable the selected DMA interrupts */
    306                  DMAy_Channelx->CCR &= ~DMA_IT;
    307              }
    308          }
    309          
    310          /**
    311            * @brief  Sets the number of data units in the current DMAy Channelx transfer.
    312            * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
    313            *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
    314            * @param  DataNumber: The number of data units in the current DMAy Channelx
    315            *         transfer.   
    316            * @note   This function can only be used when the DMAy_Channelx is disabled.                 
    317            * @retval None.
    318            */
    319          void DMA_SetCurrDataCounter(DMA_Channel_TypeDef *DMAy_Channelx, uint16_t DataNumber) {
    320              /* Check the parameters */
    321              assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
    322          
    323              /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
    324              /* Write to DMAy Channelx CNDTR */
    325              DMAy_Channelx->CNDTR = DataNumber;
    326          }
    327          
    328          /**
    329            * @brief  Returns the number of remaining data units in the current
    330            *         DMAy Channelx transfer.
    331            * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
    332            *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
    333            * @retval The number of remaining data units in the current DMAy Channelx
    334            *         transfer.
    335            */
    336          uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef *DMAy_Channelx) {
    337              /* Check the parameters */
    338              assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
    339              /* Return the number of remaining data units for DMAy Channelx */
    340              return ((uint16_t)(DMAy_Channelx->CNDTR));
    341          }
    342          
    343          /**
    344            * @brief  Checks whether the specified DMAy Channelx flag is set or not.
    345            * @param  DMAy_FLAG: specifies the flag to check.
    346            *   This parameter can be one of the following values:
    347            *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
    348            *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
    349            *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
    350            *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
    351            *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
    352            *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
    353            *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
    354            *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
    355            *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
    356            *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
    357            *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
    358            *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
    359            *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
    360            *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
    361            *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
    362            *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
    363            *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
    364            *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
    365            *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
    366            *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
    367            *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
    368            *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
    369            *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
    370            *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
    371            *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
    372            *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
    373            *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
    374            *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
    375            *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
    376            *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
    377            *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
    378            *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
    379            *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
    380            *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
    381            *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
    382            *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
    383            *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
    384            *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
    385            *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
    386            *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
    387            *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
    388            *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
    389            *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
    390            *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
    391            *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
    392            *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
    393            *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
    394            *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
    395            * @retval The new state of DMAy_FLAG (SET or RESET).
    396            */
    397          FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG) {
    398              FlagStatus bitstatus = RESET;
    399              uint32_t tmpreg = 0;
    400          
    401              /* Check the parameters */
    402              assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
    403          
    404              /* Calculate the used DMAy */
    405              if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET) {
    406                  /* Get DMA2 ISR register value */
    407                  tmpreg = DMA2->ISR;
    408              } else {
    409                  /* Get DMA1 ISR register value */
    410                  tmpreg = DMA1->ISR;
    411              }
    412          
    413              /* Check the status of the specified DMAy flag */
    414              if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET) {
    415                  /* DMAy_FLAG is set */
    416                  bitstatus = SET;
    417              } else {
    418                  /* DMAy_FLAG is reset */
    419                  bitstatus = RESET;
    420              }
    421          
    422              /* Return the DMAy_FLAG status */
    423              return bitstatus;
    424          }
    425          
    426          /**
    427            * @brief  Clears the DMAy Channelx's pending flags.
    428            * @param  DMAy_FLAG: specifies the flag to clear.
    429            *   This parameter can be any combination (for the same DMA) of the following values:
    430            *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
    431            *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
    432            *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
    433            *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
    434            *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
    435            *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
    436            *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
    437            *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
    438            *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
    439            *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
    440            *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
    441            *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
    442            *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
    443            *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
    444            *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
    445            *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
    446            *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
    447            *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
    448            *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
    449            *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
    450            *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
    451            *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
    452            *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
    453            *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
    454            *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
    455            *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
    456            *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
    457            *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
    458            *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
    459            *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
    460            *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
    461            *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
    462            *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
    463            *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
    464            *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
    465            *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
    466            *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
    467            *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
    468            *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
    469            *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
    470            *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
    471            *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
    472            *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
    473            *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
    474            *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
    475            *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
    476            *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
    477            *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
    478            * @retval None
    479            */
    480          void DMA_ClearFlag(uint32_t DMAy_FLAG) {
    481              /* Check the parameters */
    482              assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
    483          
    484              /* Calculate the used DMAy */
    485              if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET) {
    486                  /* Clear the selected DMAy flags */
    487                  DMA2->IFCR = DMAy_FLAG;
    488              } else {
    489                  /* Clear the selected DMAy flags */
    490                  DMA1->IFCR = DMAy_FLAG;
    491              }
    492          }
    493          
    494          /**
    495            * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
    496            * @param  DMAy_IT: specifies the DMAy interrupt source to check. 
    497            *   This parameter can be one of the following values:
    498            *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
    499            *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
    500            *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
    501            *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
    502            *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
    503            *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
    504            *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
    505            *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
    506            *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
    507            *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
    508            *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
    509            *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
    510            *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
    511            *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
    512            *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
    513            *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
    514            *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
    515            *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
    516            *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
    517            *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
    518            *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
    519            *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
    520            *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
    521            *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
    522            *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
    523            *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
    524            *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
    525            *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
    526            *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
    527            *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
    528            *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
    529            *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
    530            *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
    531            *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
    532            *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
    533            *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
    534            *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
    535            *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
    536            *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
    537            *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
    538            *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
    539            *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
    540            *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
    541            *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
    542            *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
    543            *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
    544            *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
    545            *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
    546            * @retval The new state of DMAy_IT (SET or RESET).
    547            */
    548          ITStatus DMA_GetITStatus(uint32_t DMAy_IT) {
    549              ITStatus bitstatus = RESET;
    550              uint32_t tmpreg = 0;
    551          
    552              /* Check the parameters */
    553              assert_param(IS_DMA_GET_IT(DMAy_IT));
    554          
    555              /* Calculate the used DMA */
    556              if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET) {
    557                  /* Get DMA2 ISR register value */
    558                  tmpreg = DMA2->ISR;
    559              } else {
    560                  /* Get DMA1 ISR register value */
    561                  tmpreg = DMA1->ISR;
    562              }
    563          
    564              /* Check the status of the specified DMAy interrupt */
    565              if ((tmpreg & DMAy_IT) != (uint32_t)RESET) {
    566                  /* DMAy_IT is set */
    567                  bitstatus = SET;
    568              } else {
    569                  /* DMAy_IT is reset */
    570                  bitstatus = RESET;
    571              }
    572              /* Return the DMA_IT status */
    573              return bitstatus;
    574          }
    575          
    576          /**
    577            * @brief  Clears the DMAy Channelx's interrupt pending bits.
    578            * @param  DMAy_IT: specifies the DMAy interrupt pending bit to clear.
    579            *   This parameter can be any combination (for the same DMA) of the following values:
    580            *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
    581            *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
    582            *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
    583            *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
    584            *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
    585            *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
    586            *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
    587            *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
    588            *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
    589            *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
    590            *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
    591            *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
    592            *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
    593            *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
    594            *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
    595            *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
    596            *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
    597            *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
    598            *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
    599            *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
    600            *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
    601            *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
    602            *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
    603            *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
    604            *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
    605            *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
    606            *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
    607            *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
    608            *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
    609            *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
    610            *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
    611            *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
    612            *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
    613            *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
    614            *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
    615            *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
    616            *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
    617            *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
    618            *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
    619            *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
    620            *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
    621            *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
    622            *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
    623            *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
    624            *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
    625            *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
    626            *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
    627            *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
    628            * @retval None
    629            */
    630          void DMA_ClearITPendingBit(uint32_t DMAy_IT) {
    631              /* Check the parameters */
    632              assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
    633          
    634              /* Calculate the used DMAy */
    635              if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET) {
    636                  /* Clear the selected DMAy interrupt pending bits */
    637                  DMA2->IFCR = DMAy_IT;
    638              } else {
    639                  /* Clear the selected DMAy interrupt pending bits */
    640                  DMA1->IFCR = DMAy_IT;
    641              }
    642          }
    643          
    644          /**
    645            * @}
    646            */
    647          
    648          /**
    649            * @}
    650            */
    651          
    652          /**
    653            * @}
    654            */
    655          
    656          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  DMA_ClearFlag
        0  DMA_ClearITPendingBit
        0  DMA_Cmd
        0  DMA_DeInit
        0  DMA_GetCurrDataCounter
        0  DMA_GetFlagStatus
        0  DMA_GetITStatus
        0  DMA_ITConfig
        4  DMA_Init
        0  DMA_SetCurrDataCounter
        0  DMA_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      16  DMA_ClearFlag
      16  DMA_ClearITPendingBit
      28  DMA_Cmd
     266  DMA_DeInit
       6  DMA_GetCurrDataCounter
      42  DMA_GetFlagStatus
      42  DMA_GetITStatus
      22  DMA_ITConfig
      62  DMA_Init
       6  DMA_SetCurrDataCounter
      46  DMA_StructInit

 
 616 bytes in section .text
 
 616 bytes of CODE memory

Errors: none
Warnings: none
