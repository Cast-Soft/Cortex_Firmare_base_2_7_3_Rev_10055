###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     19/Mar/2019  16:48:05 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\App\i2c_ee.c                     #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\App\i2c_ee.c" -D BEACON_APP -D  #
#                    USE_STDPERIPH_DRIVER -D STM32F10X_CL -D COOS -D          #
#                    USE_MY_ASSERT -D BC_HW_REVJ -D _DEBUG -D BOOTLOADER -D   #
#                    EE_M24C02 -D TASKS_PROFILE -D BATTERY_CHECK -D           #
#                    CCA_EN_NO -D NEW_BEACON -D USE_TIM4 -D WDT_ENABLE -D     #
#                    OLD_CONFIG -D CIRCULAR_LOG -lcN                          #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\Debug-Bootloader\List\" -o  #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\Debug-Bootloader\Obj\"      #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\RevJ\RevJ Beacon\firmware\beacon\IAR\..\App\" -I       #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\CMSIS\CM3\Devi #
#                    ceSupport\ST\STM32F10x\" -I                              #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\STM32F10x_StdP #
#                    eriph_Driver\inc\" -I "C:\Users\User\Documents\Cortex_gi #
#                    t\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\..\.. #
#                    \common\CoOS\kernel\" -I "C:\Users\User\Documents\Cortex #
#                    _git\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\IAR\.. #
#                    \..\common\CoOS\portable\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\..\common\" -I        #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\..\..\common\USB-Device-CDC #
#                    \" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Re #
#                    vJ\RevJ Beacon\firmware\beacon\IAR\..\..\common\" -I     #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\Rev #
#                    J Beacon\firmware\beacon\IAR\" -On --use_c++_inline -I   #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader\List\i2c_ee #
#                    .lst                                                     #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ #
#                     Beacon\firmware\beacon\IAR\Debug-Bootloader\Obj\i2c_ee. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\RevJ\RevJ Beacon\firmware\beacon\App\i2c_ee.c
      1          /**
      2            ******************************************************************************
      3            * @file    I2C/EEPROM/i2c_ee.c 
      4            * @author  MCD Application Team
      5            * @version V3.1.2
      6            * @date    09/28/2009
      7            * @brief   This file provides a set of functions needed to manage the
      8            *          communication between I2C peripheral and I2C M24CXX EEPROM.
      9            ******************************************************************************
     10            * @copy
     11            *
     12            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     14            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     15            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     16            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     17            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18            *
     19            * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
     20            */ 
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "i2c_ee.h"
     24          #include "stm32f10x_i2c.h"
     25          
     26          #include "CoOS.h"
     27          
     28          #define TRUE 1
     29          #define FALSE 0
     30          U64 eeOSTime;
     31          extern void HwI2CInit(void);
     32          static BOOL I2C_EE_PageWriteIMP(const uint8_t* pBuffer, uint16_t WriteAddr, uint8_t NumByteToWrite);
     33          void EETime()
     34          {
     35            eeOSTime = CoGetOSTime();    
     36          }
     37          
     38          BOOL TIMEVALID()
     39          {
     40            if (CoGetOSTime() > eeOSTime + 100) {
     41              return FALSE;
     42            }
     43            return TRUE;
     44          }
     45          
     46          void I2C_EE_PageWrite(const uint8_t* pBuffer, uint16_t WriteAddr, uint8_t NumByteToWrite)
     47          {
     48          again:
     49            EETime();  
     50            if (I2C_EE_PageWriteIMP(pBuffer, WriteAddr, NumByteToWrite) == FALSE) {
     51              HwI2CInit();
     52              goto again;    
     53            }
     54          }
     55          
     56          #define TIMEOUTRETURN if (!TIMEVALID()) return FALSE
     57          #define TIMEOUTAGAIN if (!TIMEVALID()) goto again
     58          
     59          /** @addtogroup STM32F10x_StdPeriph_Examples
     60            * @{
     61            */
     62          
     63          /** @addtogroup I2C_EEPROM
     64            * @{
     65            */ 
     66          
     67          /* Private typedef -----------------------------------------------------------*/
     68          /* Private define ------------------------------------------------------------*/
     69          #define I2C_Speed              200000
     70          #define I2C_SLAVE_ADDRESS7     0xA0
     71          
     72          #if defined (EE_M24C02)
     73          #define I2C_FLASH_PAGESIZE      8
     74          #elif defined (EE_M24C08)
     75           #define I2C_FLASH_PAGESIZE    16
     76          #elif defined (EE_M24C64_32)
     77           #define I2C_FLASH_PAGESIZE    32
     78          #endif
     79          
     80          /* Private macro -------------------------------------------------------------*/
     81          /* Private variables ---------------------------------------------------------*/
     82          extern uint16_t EEPROM_ADDRESS;
     83          
     84          /* Private function prototypes -----------------------------------------------*/
     85          //void GPIO_Configuration(void);
     86          //void I2C_Configuration(void);
     87          
     88          /* Private functions ---------------------------------------------------------*/
     89          
     90          
     91          #if 0
     92          /**
     93            * @brief  Writes one byte to the I2C EEPROM.
     94            * @param  pBuffer : pointer to the buffer  containing the data to be 
     95            *   written to the EEPROM.
     96            * @param  WriteAddr : EEPROM's internal address to write to.
     97            * @retval None
     98            */
     99          static void I2C_EE_ByteWrite(const uint8_t* pBuffer, uint16_t WriteAddr)
    100          {
    101            /* Send STRAT condition */
    102            I2C_GenerateSTART(I2C_EE, ENABLE);
    103          
    104            /* Test on EV5 and clear it */
    105            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_MODE_SELECT));  
    106          
    107            /* Send EEPROM address for write */
    108            I2C_Send7bitAddress(I2C_EE, EEPROM_ADDRESS, I2C_Direction_Transmitter);
    109            
    110            /* Test on EV6 and clear it */
    111            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    112          
    113          #ifndef EE_M24C64_32
    114            
    115            /* Send the EEPROM's internal address to write to : only one byte Address */
    116            I2C_SendData(I2C_EE, WriteAddr);
    117            
    118          #else
    119            
    120            /* Send the EEPROM's internal address to write to : MSB of the address first */
    121            I2C_SendData(I2C_EE, (uint8_t)((WriteAddr & 0xFF00) >> 8));
    122          
    123            /* Test on EV8 and clear it */
    124            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    125            
    126            /* Send the EEPROM's internal address to write to : LSB of the address */
    127            I2C_SendData(I2C_EE, (uint8_t)(WriteAddr & 0x00FF));
    128            
    129          #endif /* EE_M24C64_32 */  
    130            
    131            /* Test on EV8 and clear it */
    132            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    133          
    134            /* Send the byte to be written */
    135            I2C_SendData(I2C_EE, *pBuffer); 
    136             
    137            /* Test on EV8 and clear it */
    138            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    139            
    140            /* Send STOP condition */
    141            I2C_GenerateSTOP(I2C_EE, ENABLE);
    142            I2C_EE_WaitEepromStandbyState();
    143          }
    144          #endif
    145          
    146          /**
    147            * @brief  Reads a block of data from the EEPROM.
    148            * @param  pBuffer : pointer to the buffer that receives the data read 
    149            *   from the EEPROM.
    150            * @param  ReadAddr : EEPROM's internal address to read from.
    151            * @param  NumByteToRead : number of bytes to read from the EEPROM.
    152            * @retval None
    153            */
    154          void I2C_EE_BufferRead(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t NumByteToRead)
    155          {  
    156              /* While the bus is busy */
    157            while(I2C_GetFlagStatus(I2C_EE, I2C_FLAG_BUSY));
    158            
    159            /* Send START condition */
    160            I2C_GenerateSTART(I2C_EE, ENABLE);
    161            
    162            /* Test on EV5 and clear it */
    163            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_MODE_SELECT));
    164             
    165            /* Send EEPROM address for write */
    166            I2C_Send7bitAddress(I2C_EE, EEPROM_ADDRESS, /*I2C_Direction_Receiver*/I2C_Direction_Transmitter);
    167          
    168          
    169            /* Test on EV6 and clear it */
    170            while(!I2C_CheckEvent(I2C_EE, /*I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED*/I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
    171          
    172          #ifndef EE_M24C64_32  
    173            
    174            /* Send the EEPROM's internal address to read from: Only one byte address */
    175            I2C_SendData(I2C_EE, ReadAddr);  
    176          
    177          #else
    178          
    179            /* Send the EEPROM's internal address to read from: MSB of the address first */
    180            I2C_SendData(I2C_EE, (uint8_t)((ReadAddr & 0xFF00) >> 8));    
    181            
    182            /* Test on EV8 and clear it */
    183            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    184          
    185            /* Send the EEPROM's internal address to read from: LSB of the address */
    186            I2C_SendData(I2C_EE, (uint8_t)(ReadAddr & 0x00FF));    
    187            
    188          #endif /* EE_M24C64_32 */
    189            
    190            /* Test on EV8 and clear it */
    191            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    192            
    193          
    194            /* Send STRAT condition a second time */  
    195            I2C_GenerateSTART(I2C_EE, ENABLE);
    196            
    197            /* Test on EV5 and clear it */
    198            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_MODE_SELECT));
    199            
    200            /* Send EEPROM address for read */
    201            I2C_Send7bitAddress(I2C_EE, EEPROM_ADDRESS, I2C_Direction_Receiver);
    202          
    203            
    204            /* Test on EV6 and clear it */
    205            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
    206          
    207            
    208            /* While there is data to be read */
    209            while(NumByteToRead)  
    210            {
    211              if(NumByteToRead == 1)
    212              {
    213                /* Disable Acknowledgement */
    214                I2C_AcknowledgeConfig(I2C_EE, DISABLE);
    215                
    216                /* Send STOP Condition */
    217           //     I2C_GenerateSTOP(I2C_EE, ENABLE);
    218              }
    219          
    220              /* Test on EV7 and clear it */
    221              if(I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_RECEIVED))  
    222              {      
    223                /* Read a byte from the EEPROM */
    224                *pBuffer = I2C_ReceiveData(I2C_EE);
    225          
    226                /* Point to the next location where the byte read will be saved */
    227                pBuffer++; 
    228                
    229                /* Decrement the read bytes counter */
    230                NumByteToRead--;        
    231              }   
    232            }
    233                I2C_GenerateSTOP(I2C_EE, ENABLE);
    234          
    235            /* Enable Acknowledgement to be ready for another reception */
    236            I2C_AcknowledgeConfig(I2C_EE, ENABLE);
    237          }
    238          
    239          /**
    240            * @brief  Writes buffer of data to the I2C EEPROM.
    241            * @param  pBuffer : pointer to the buffer  containing the data to be 
    242            *   written to the EEPROM.
    243            * @param  WriteAddr : EEPROM's internal address to write to.
    244            * @param  NumByteToWrite : number of bytes to write to the EEPROM.
    245            * @retval None
    246            */
    247          void I2C_EE_BufferWrite(const uint8_t* pBuffer, uint16_t WriteAddr, uint16_t NumByteToWrite)
    248          {
    249            uint8_t NumOfPage = 0, NumOfSingle = 0, count = 0;
    250            uint16_t Addr = 0;
    251          
    252            Addr = WriteAddr % I2C_FLASH_PAGESIZE;
    253            count = I2C_FLASH_PAGESIZE - Addr;
    254            NumOfPage =  NumByteToWrite / I2C_FLASH_PAGESIZE;
    255            NumOfSingle = NumByteToWrite % I2C_FLASH_PAGESIZE;
    256           
    257            /* If WriteAddr is I2C_FLASH_PAGESIZE aligned  */
    258            if(Addr == 0) 
    259            {
    260              /* If NumByteToWrite < I2C_FLASH_PAGESIZE */
    261              if(NumOfPage == 0) 
    262              {
    263                I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle);
    264              //  I2C_EE_WaitEepromStandbyState();
    265              }
    266              /* If NumByteToWrite > I2C_FLASH_PAGESIZE */
    267              else  
    268              {
    269                while(NumOfPage--)
    270                {
    271                  I2C_EE_PageWrite(pBuffer, WriteAddr, I2C_FLASH_PAGESIZE); 
    272                //  I2C_EE_WaitEepromStandbyState();
    273                  WriteAddr +=  I2C_FLASH_PAGESIZE;
    274                  pBuffer += I2C_FLASH_PAGESIZE;
    275                }
    276          
    277                if(NumOfSingle!=0)
    278                {
    279                  I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle);
    280                //  I2C_EE_WaitEepromStandbyState();
    281                }
    282              }
    283            }
    284            /* If WriteAddr is not I2C_FLASH_PAGESIZE aligned  */
    285            else 
    286            {
    287              /* If NumByteToWrite < I2C_FLASH_PAGESIZE */
    288              if(NumOfPage== 0) 
    289              {
    290                /* If the number of data to be written is more than the remaining space 
    291                in the current page: */
    292                if (NumByteToWrite > count)
    293                {
    294                  /* Write the data conained in same page */
    295                  I2C_EE_PageWrite(pBuffer, WriteAddr, count);
    296                //  I2C_EE_WaitEepromStandbyState();      
    297                  
    298                  /* Write the remaining data in the following page */
    299                  I2C_EE_PageWrite((uint8_t*)(pBuffer + count), (WriteAddr + count), (NumByteToWrite - count));
    300               //   I2C_EE_WaitEepromStandbyState();        
    301                }      
    302                else      
    303                {
    304                  I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle);
    305                //  I2C_EE_WaitEepromStandbyState();        
    306                }     
    307              }
    308              /* If NumByteToWrite > I2C_FLASH_PAGESIZE */
    309              else
    310              {
    311                NumByteToWrite -= count;
    312                NumOfPage =  NumByteToWrite / I2C_FLASH_PAGESIZE;
    313                NumOfSingle = NumByteToWrite % I2C_FLASH_PAGESIZE;
    314                
    315                if(count != 0)
    316                {  
    317                  I2C_EE_PageWrite(pBuffer, WriteAddr, count);
    318                  I2C_EE_WaitEepromStandbyState();
    319                  WriteAddr += count;
    320                  pBuffer += count;
    321                } 
    322                
    323                while(NumOfPage--)
    324                {
    325                  I2C_EE_PageWrite(pBuffer, WriteAddr, I2C_FLASH_PAGESIZE);
    326                  I2C_EE_WaitEepromStandbyState();
    327                  WriteAddr +=  I2C_FLASH_PAGESIZE;
    328                  pBuffer += I2C_FLASH_PAGESIZE;  
    329                }
    330                if(NumOfSingle != 0)
    331                {
    332                  I2C_EE_PageWrite(pBuffer, WriteAddr, NumOfSingle); 
    333              //    I2C_EE_WaitEepromStandbyState();
    334                }
    335              }
    336            }  
    337          }
    338          
    339          /**
    340            * @brief  Writes more than one byte to the EEPROM with a single WRITE cycle.
    341            * @note   The number of byte can't exceed the EEPROM page size.
    342            * @param  pBuffer : pointer to the buffer containing the data to be 
    343            *   written to the EEPROM.
    344            * @param  WriteAddr : EEPROM's internal address to write to.
    345            * @param  NumByteToWrite : number of bytes to write to the EEPROM.
    346            * @retval None
    347            */
    348          BOOL I2C_EE_PageWriteIMP(const uint8_t* pBuffer, uint16_t WriteAddr, uint8_t NumByteToWrite)
    349          { 
    350            /* While the bus is busy */
    351            while(I2C_GetFlagStatus(I2C_EE, I2C_FLAG_BUSY) && TIMEVALID()); TIMEOUTRETURN;
    352            
    353            /* Send START condition */
    354            I2C_GenerateSTART(I2C_EE, ENABLE);
    355            
    356            /* Test on EV5 and clear it */
    357            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_MODE_SELECT) && TIMEVALID()); TIMEOUTRETURN;
    358            
    359            /* Send EEPROM address for write */
    360            I2C_Send7bitAddress(I2C_EE, EEPROM_ADDRESS, I2C_Direction_Transmitter);
    361          
    362            /* Test on EV6 and clear it */
    363            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED) && TIMEVALID()); TIMEOUTRETURN; 
    364          
    365          #ifndef EE_M24C64_32
    366            
    367            /* Send the EEPROM's internal address to write to : only one byte Address */
    368            I2C_SendData(I2C_EE, WriteAddr);
    369            
    370          #else 
    371            
    372            /* Send the EEPROM's internal address to write to : MSB of the address first */
    373            I2C_SendData(I2C_EE, (uint8_t)((WriteAddr & 0xFF00) >> 8));
    374          
    375            /* Test on EV8 and clear it */
    376            while(!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) && TIMEVALID()); TIMEOUTRETURN; 
    377            
    378            /* Send the EEPROM's internal address to write to : LSB of the address */
    379            I2C_SendData(I2C_EE, (uint8_t)(WriteAddr & 0x00FF));
    380            
    381          #endif /* EE_M24C64_32 */  
    382          
    383            /* Test on EV8 and clear it */
    384            while(! I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) && TIMEVALID()); TIMEOUTRETURN; 
    385          
    386            /* While there is data to be written */
    387            while(NumByteToWrite--)  
    388            {
    389              /* Send the current byte */
    390              I2C_SendData(I2C_EE, *pBuffer); 
    391          
    392              /* Point to the next byte to be written */
    393              pBuffer++; 
    394            
    395              /* Test on EV8 and clear it */
    396              while (!I2C_CheckEvent(I2C_EE, I2C_EVENT_MASTER_BYTE_TRANSMITTED) && TIMEVALID()); TIMEOUTRETURN; 
    397            }
    398          
    399            /* Send STOP condition */
    400            I2C_GenerateSTOP(I2C_EE, ENABLE);
    401            I2C_EE_WaitEepromStandbyState();
    402            
    403            return TRUE;
    404          }
    405          
    406          /**
    407            * @brief  Wait for EEPROM Standby state
    408            * @param  None
    409            * @retval None
    410            */
    411          static void I2C_EE_WaitEepromStandbyState(void)      
    412          {
    413            __IO uint16_t SR1_Tmp = 0;
    414          again:  
    415            EETime();
    416            do
    417            {
    418              /* Send START condition */
    419              I2C_GenerateSTART(I2C_EE, ENABLE);
    420          
    421              /* Read I2C_EE SR1 register to clear pending flags */
    422              SR1_Tmp = I2C_ReadRegister(I2C_EE, I2C_Register_SR1);
    423          
    424              /* Send EEPROM address for write */
    425              I2C_Send7bitAddress(I2C_EE, EEPROM_ADDRESS, I2C_Direction_Transmitter);
    426          
    427              TIMEOUTAGAIN;
    428            
    429            }while(!(I2C_ReadRegister(I2C_EE, I2C_Register_SR1) & 0x0002));
    430            
    431            /* Clear AF flag */
    432            I2C_ClearFlag(I2C_EE, I2C_FLAG_AF);
    433            
    434            /* STOP condition */    
    435            I2C_GenerateSTOP(I2C_EE, ENABLE);  
    436          }
    437          
    438          /**
    439            * @}
    440            */ 
    441          
    442          /**
    443            * @}
    444            */ 
    445          
    446          /******************* (C) COPYRIGHT 2009 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  EETime
              8 -> CoGetOSTime
       16  I2C_EE_BufferRead
             16 -> I2C_AcknowledgeConfig
             16 -> I2C_CheckEvent
             16 -> I2C_GenerateSTART
             16 -> I2C_GenerateSTOP
             16 -> I2C_GetFlagStatus
             16 -> I2C_ReceiveData
             16 -> I2C_Send7bitAddress
             16 -> I2C_SendData
       32  I2C_EE_BufferWrite
             32 -> I2C_EE_PageWrite
             32 -> I2C_EE_WaitEepromStandbyState
       16  I2C_EE_PageWrite
             16 -> EETime
             16 -> HwI2CInit
             16 -> I2C_EE_PageWriteIMP
       16  I2C_EE_PageWriteIMP
             16 -> I2C_CheckEvent
             16 -> I2C_EE_WaitEepromStandbyState
             16 -> I2C_GenerateSTART
             16 -> I2C_GenerateSTOP
             16 -> I2C_GetFlagStatus
             16 -> I2C_Send7bitAddress
             16 -> I2C_SendData
             16 -> TIMEVALID
        8  I2C_EE_WaitEepromStandbyState
              8 -> EETime
              8 -> I2C_ClearFlag
              8 -> I2C_GenerateSTART
              8 -> I2C_GenerateSTOP
              8 -> I2C_ReadRegister
              8 -> I2C_Send7bitAddress
              8 -> TIMEVALID
       16  TIMEVALID
             16 -> CoGetOSTime


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      16  EETime
     214  I2C_EE_BufferRead
     356  I2C_EE_BufferWrite
      38  I2C_EE_PageWrite
     238  I2C_EE_PageWriteIMP
      84  I2C_EE_WaitEepromStandbyState
      40  TIMEVALID
       8  eeOSTime

 
     8 bytes in section .bss
 1 022 bytes in section .text
 
 1 022 bytes of CODE memory
     8 bytes of DATA memory

Errors: none
Warnings: none
