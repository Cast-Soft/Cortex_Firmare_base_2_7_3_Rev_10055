###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     21/Mar/2019  12:17:19 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\common\CoOS\kernel\m #
#                    utex.c                                                   #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\common\CoOS\kernel\m #
#                    utex.c" -D BEACON_APP -D USE_STDPERIPH_DRIVER -D         #
#                    STM32F10X_CL -D COOS -D USE_MY_ASSERT -D BC_HW_REVJ -D   #
#                    _DEBUG -D BOOTLOADER -D EE_M24C02 -D TASKS_PROFILE -D    #
#                    BATTERY_CHECK -D CCA_EN_NO -D NEW_BEACON -D USE_TIM4 -D  #
#                    WDT_ENABLE -D OLD_CONFIG -D CIRCULAR_LOG -D msgmethod1   #
#                    -lcN "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Sou #
#                    rce Code\BLKT-01 Beacon\Source\firmware\beacon -         #
#                    Copy\IAR\Debug-Bootloader\List\" -o                      #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\" --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\Source Code\BLKT-01 Beacon\Source\firmware\beacon -    #
#                    Copy\IAR\..\App\" -I "C:\Users\User\Documents\Cortex_git #
#                    \BLKT-01.git\Source Code\BLKT-01                         #
#                    Beacon\Source\firmware\beacon -                          #
#                    Copy\IAR\..\..\common\CMSIS\CM3\DeviceSupport\ST\STM32F1 #
#                    0x\" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\ #
#                    Source Code\BLKT-01 Beacon\Source\firmware\beacon -      #
#                    Copy\IAR\..\..\common\STM32F10x_StdPeriph_Driver\inc\"   #
#                    -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Sourc #
#                    e Code\BLKT-01 Beacon\Source\firmware\beacon -           #
#                    Copy\IAR\..\..\common\CoOS\kernel\" -I                   #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\CoOS\portable\" -I                 #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\..\common\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\USB-Device-CDC\" -I                #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\" -I "C:\Users\User\Documents\Cort #
#                    ex_git\BLKT-01.git\Source Code\BLKT-01                   #
#                    Beacon\Source\firmware\beacon - Copy\IAR\" -On           #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\List\mutex.lst                 #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\mutex.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source Code\BLKT-01 Beacon\Source\firmware\common\CoOS\kernel\mutex.c
      1          /**
      2           *******************************************************************************
      3           * @file       mutex.c
      4           * @version   V1.1.4
      5           * @date      2011.04.20
      6           * @brief      Mutex management implementation code of CooCox CoOS kernel.
      7           *******************************************************************************
      8           * @copy
      9           *
     10           * INTERNAL FILE,DON'T PUBLIC.
     11           *
     12           * <h2><center>&copy; COPYRIGHT 2009 CooCox </center></h2>
     13           *******************************************************************************
     14           */
     15          
     16          
     17          
     18          /*---------------------------- Include ---------------------------------------*/
     19          #include <coocox.h>
     20          #include <stdint.h>
     21          
     22          
     23          /*---------------------------- Variable Define -------------------------------*/
     24          #if CFG_MUTEX_EN > 0
     25          
     26          OS_MutexID MutexFreeID = 0;               /*!< Point to next vliad mutex ID.  */
     27          MUTEX      MutexTbl[CFG_MAX_MUTEX] = {{0}}; /*!< Mutex struct array             */
     28          
     29          
     30          
     31          /**
     32           *******************************************************************************
     33           * @brief      Create a mutex
     34           * @param[in]  None
     35           * @param[out] None
     36           * @retval     E_CREATE_FAIL  Create mutex fail.
     37           * @retval     others         Create mutex successful.
     38           *
     39           * @par Description
     40           * @details    This function is called to create a mutex.
     41           * @note
     42           *******************************************************************************
     43           */
     44          OS_MutexID CoCreateMutex(void)
     45          {
     46              OS_MutexID id;
     47              P_MUTEX pMutex;
     48              OsSchedLock();
     49          
     50              /* Assign a free mutex control block */
     51              if(MutexFreeID < CFG_MAX_MUTEX )
     52              {
     53                  id  = MutexFreeID++;
     54                  OsSchedUnlock();
     55                  pMutex = &MutexTbl[id];
     56                  pMutex->hipriTaskID  = INVALID_ID;
     57                  pMutex->originalPrio = 0xff;
     58                  pMutex->mutexFlag    = MUTEX_FREE;  /* Mutex is free,not was occupied */
     59                  pMutex->taskID       = INVALID_ID;
     60                  pMutex->waittingList = Co_NULL;
     61                  return id;                      /* Return mutex ID                    */
     62              }
     63          
     64              OsSchedUnlock();
     65              return E_CREATE_FAIL;               /* No free mutex control block        */
     66          }
     67          
     68          
     69          
     70          /**
     71           *******************************************************************************
     72           * @brief      Enter a critical area
     73           * @param[in]  mutexID    Specify mutex.
     74           * @param[out] None
     75           * @retval     E_INVALID_ID  Invalid mutex id.
     76           * @retval     E_CALL        Error call in ISR.
     77           * @retval     E_OK          Enter critical area successful.
     78           *
     79           * @par Description
     80           * @details    This function is called when entering a critical area.
     81           * @note
     82           *******************************************************************************
     83           */
     84          StatusType CoEnterMutexSection(OS_MutexID mutexID)
     85          {
     86              P_OSTCB ptcb,pCurTcb;
     87              P_MUTEX pMutex;
     88          
     89          #if CFG_EVENT_EN >0
     90              P_ECB pecb;
     91          #endif
     92          
     93              if(OSIntNesting > 0)                /* If the caller is ISR               */
     94              {
     95                  return E_CALL;
     96              }
     97              if(OSSchedLock != 0)                /* Is OS lock?                        */
     98              {
     99                  return E_OS_IN_LOCK;            /* Yes,error return                   */
    100              }
    101          
    102          #if CFG_PAR_CHECKOUT_EN >0
    103              if(mutexID >= MutexFreeID)          /* Invalid 'mutexID'                  */
    104              {
    105                  return E_INVALID_ID;
    106              }
    107          #endif
    108          
    109              OsSchedLock();
    110              pCurTcb = TCBRunning;
    111              pMutex  = &MutexTbl[mutexID];
    112          
    113              pCurTcb->mutexID = mutexID;
    114              if(pMutex->mutexFlag == MUTEX_FREE)       /* If mutex is available        */
    115              {
    116                  pMutex->originalPrio = pCurTcb->prio; /* Save priority of owning task */
    117                  pMutex->taskID       = pCurTcb->taskID;   /* Acquire the resource     */
    118                  pMutex->hipriTaskID  = pCurTcb->taskID;
    119                  pMutex->mutexFlag    = MUTEX_OCCUPY;      /* Occupy the mutex resource*/
    120              }
    121              /* If the mutex resource had been occupied                                */
    122              else if(pMutex->mutexFlag == MUTEX_OCCUPY)
    123              {
    124          		ptcb = &TCBTbl[pMutex->taskID];
    125                  if(ptcb->prio > pCurTcb->prio)  /* Need to promote priority of owner? */
    126                  {
    127          #if CFG_ORDER_LIST_SCHEDULE_EN ==0
    128          			DeleteTaskPri(ptcb->prio);
    129          			ActiveTaskPri(pCurTcb->prio);
    130          #endif
    131                      ptcb->prio = pCurTcb->prio;	    /* Promote prio of owner          */
    132          
    133                      /* Upgarde the highest priority about the mutex                   */
    134                      pMutex->hipriTaskID	= pCurTcb->taskID;
    135                      if(ptcb->state == TASK_READY)   /* If the task is ready to run    */
    136                      {
    137                          TASK_SEQ(ptcb); RemoveFromTCBRdyList(ptcb); /* Remove the task from READY list*/
    138                          TASK_SEQ(ptcb); InsertToTCBRdyList(ptcb);   /* Insert the task into READY list*/
    139                      }
    140          #if CFG_EVENT_EN >0
    141                      /* If the task is waiting on a event                              */
    142                      else if(ptcb->eventID != INVALID_ID)
    143                      {
    144                          pecb = &EventTbl[ptcb->eventID];
    145          
    146                          /* If the event waiting type is preemptive Priority           */
    147                          if(pecb->eventSortType == EVENT_SORT_TYPE_PRIO)
    148                          {
    149                              /* Remove the task from event waiting list                */
    150                              RemoveEventWaittingList(ptcb);
    151          
    152                              /* Insert the task into event waiting list                */
    153                              EventTaskToWait(pecb,ptcb);
    154                          }
    155                      }
    156          #endif
    157                  }
    158          
    159                  pCurTcb->state   = TASK_WAITING; TASK_SEQ(pCurTcb);  /* Block current task             */
    160          		TaskSchedReq     = Co_TRUE;
    161                  pCurTcb->TCBnext = Co_NULL;
    162                  pCurTcb->TCBprev = Co_NULL;
    163          
    164                  ptcb = pMutex->waittingList;
    165                  if(ptcb == Co_NULL)               /* If the event waiting list is empty  */
    166                  {
    167                      pMutex->waittingList = pCurTcb; /* Insert the task to head        */
    168                  }
    169                  else                        /* If the event waiting list is not empty */
    170                  {
    171                      while(ptcb->TCBnext != Co_NULL)    /* Insert the task to tail        */
    172                      {
    173                          ptcb = ptcb->TCBnext;
    174                      }
    175                      //assert(ptcb != pCurTcb);
    176                      ptcb->TCBnext    = pCurTcb;
    177                      pCurTcb->TCBprev = ptcb;
    178                      pCurTcb->TCBnext = Co_NULL;
    179                  }
    180              }
    181              OsSchedUnlock();
    182              return E_OK;
    183          }
    184          
    185          
    186          /**
    187           *******************************************************************************
    188           * @brief      Leave from a critical area
    189           * @param[in]  mutexID 	Specify mutex id.
    190           * @param[out] None
    191           * @retval     E_INVALID_ID  Invalid mutex id.
    192           * @retval     E_CALL        Error call in ISR.
    193           * @retval     E_OK          Exit a critical area successful.
    194           *
    195           * @par Description
    196           * @details    This function must be called when exiting from a critical area.
    197           * @note
    198           *******************************************************************************
    199           */
    200          StatusType CoLeaveMutexSection(OS_MutexID mutexID)
    201          {
    202              P_OSTCB ptcb;
    203              P_MUTEX pMutex;
    204              U8      prio;
    205              U8      taskID;
    206          
    207              if(OSIntNesting > 0)                /* If the caller is ISR               */
    208              {
    209                  return E_CALL;
    210              }
    211          
    212          #if CFG_PAR_CHECKOUT_EN >0
    213              if(mutexID >= MutexFreeID)
    214              {
    215                  return E_INVALID_ID;            /* Invalid mutex id, return error     */
    216              }
    217          #endif
    218              OsSchedLock();
    219              pMutex = &MutexTbl[mutexID];        /* Obtain point of mutex control block*/
    220              ptcb = &TCBTbl[pMutex->taskID];
    221          	ptcb->mutexID = INVALID_ID;
    222          	if(pMutex->waittingList == Co_NULL)    /* If the mutex waiting list is empty */
    223              {
    224                  pMutex->mutexFlag = MUTEX_FREE; /* The mutex resource is available    */
    225                  pMutex->taskID    = INVALID_ID;
    226                  OsSchedUnlock();
    227              }
    228              else              /* If there is at least one task waitting for the mutex */
    229              {
    230                  taskID = pMutex->taskID;        /* Get task ID of mutex owner         */
    231          
    232                                          /* we havn't promoted current task's priority */
    233                  if(pMutex->hipriTaskID == taskID)
    234                  {
    235                      ptcb = pMutex->waittingList;/* Point to mutex first waiting task  */
    236                      prio = ptcb->prio;
    237                      while(ptcb != Co_NULL)         /* Find the highest priority task     */
    238                      {
    239                          if(ptcb->prio < prio)
    240                          {
    241                              prio = ptcb->prio;
    242                              pMutex->hipriTaskID = ptcb->taskID;
    243                          }
    244                          ptcb = ptcb->TCBnext;
    245                      }
    246                  }
    247                  else                     /* we have promoted current task's priority  */
    248                  {
    249          			prio = TCBTbl[taskID].prio;
    250                  }
    251          
    252                  /* Reset the task priority */
    253          		pMutex->taskID = INVALID_ID;
    254          		CoSetPriority(taskID,pMutex->originalPrio);
    255          
    256                  /* Find first task in waiting list ready to run  */
    257                  ptcb                 = pMutex->waittingList;
    258                  pMutex->waittingList = ptcb->TCBnext;
    259                  pMutex->originalPrio = ptcb->prio;
    260                  pMutex->taskID       = ptcb->taskID;
    261          
    262          #if CFG_ORDER_LIST_SCHEDULE_EN ==0
    263          		if(prio != ptcb->prio)
    264          		{
    265          			DeleteTaskPri(ptcb->prio);
    266          			ActiveTaskPri(prio);
    267          		}
    268          #endif
    269          
    270                  ptcb->prio           = prio;    /* Raise the task's priority          */
    271          
    272                  /* Insert the task which acquire the mutex into ready list.           */
    273                  ptcb->TCBnext = Co_NULL;
    274                  ptcb->TCBprev = Co_NULL;
    275          
    276          		TASK_SEQ(ptcb); InsertToTCBRdyList(ptcb);     /* Insert the task into the READY list  */
    277                  OsSchedUnlock();
    278              }
    279              return E_OK;
    280          }
    281          
    282          /**
    283           *******************************************************************************
    284           * @brief      Remove a task from mutex waiting list
    285           * @param[in]  ptcb   TCB which will remove out.
    286           * @param[out] None
    287           * @retval     None
    288           *
    289           * @par Description
    290           * @details   This function be called when delete a task.
    291           * @note
    292           *******************************************************************************
    293           */
    294          void RemoveMutexList(P_OSTCB ptcb)
    295          {
    296              U8 prio;
    297          	OS_TID taskID;
    298              P_MUTEX pMutex;
    299              pMutex = &MutexTbl[ptcb->mutexID];
    300          
    301              /* If only one task waiting on mutex                                      */
    302              if((ptcb->TCBnext ==Co_NULL) && (ptcb->TCBprev == Co_NULL))
    303              {
    304                  pMutex->waittingList = Co_NULL;     /* Waiting list is empty             */
    305              }
    306              else if(ptcb->TCBnext == Co_NULL)  /* If the task is the last of waiting list*/
    307              {
    308                  /* Remove task from mutex waiting list                                */
    309                  ptcb->TCBprev->TCBnext = Co_NULL;
    310                  ptcb->TCBprev = Co_NULL;
    311              }
    312              else if(ptcb->TCBprev ==  Co_NULL)/* If the task is the first of waiting list*/
    313              {
    314                  /* Remove task from waiting list                                      */
    315                  ptcb->TCBnext->TCBprev = Co_NULL;
    316                  ptcb->TCBnext = Co_NULL;
    317              }
    318              else                      /* If the task is in the middle of waiting list */
    319              {
    320                  /* Remove task from wait list */
    321                  ptcb->TCBnext->TCBprev = ptcb->TCBprev;
    322                  assert(ptcb->TCBnext != ptcb->TCBprev);
    323                  ptcb->TCBprev->TCBnext = ptcb->TCBnext;
    324                  ptcb->TCBprev          = Co_NULL;
    325                  ptcb->TCBnext          = Co_NULL;
    326              }
    327          
    328              ptcb->mutexID = INVALID_ID;
    329          
    330              /* If the task have highest priority in mutex waiting list                */
    331              if(pMutex->hipriTaskID == ptcb->taskID)
    332              {
    333                  ptcb = pMutex->waittingList;
    334                  prio = pMutex->originalPrio;
    335                  pMutex->hipriTaskID = pMutex->taskID;
    336                  while(ptcb != Co_NULL)           /* Find task ID of highest priority task*/
    337                  {
    338                      if(ptcb->prio < prio)
    339                      {
    340                          prio = ptcb->prio;
    341                          pMutex->hipriTaskID = ptcb->taskID;
    342                      }
    343                      ptcb = ptcb->TCBnext;
    344                  }
    345          		taskID = pMutex->taskID;
    346          		pMutex->taskID = INVALID_ID;
    347          		CoSetPriority(taskID,prio);         /* Reset the mutex ower priority  */
    348          		pMutex->taskID = taskID;
    349              }
    350          }
    351          
    352          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  CoCreateMutex
             16 -> OsSchedUnlock
       24  CoEnterMutexSection
             24 -> EventTaskToWait
             24 -> InsertToTCBRdyList
             24 -> OsSchedUnlock
             24 -> RemoveEventWaittingList
             24 -> RemoveFromTCBRdyList
       24  CoLeaveMutexSection
             24 -> CoSetPriority
             24 -> InsertToTCBRdyList
             24 -> OsSchedUnlock
       24  RemoveMutexList
             24 -> CoSetPriority
             24 -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     120  ?<Constant "C:\\Users\\User\\Documen...">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
      84  CoCreateMutex
     236  CoEnterMutexSection
     192  CoLeaveMutexSection
       1  MutexFreeID
      80  MutexTbl
     178  RemoveMutexList

 
  81 bytes in section .bss
 120 bytes in section .rodata
 726 bytes in section .text
 
 726 bytes of CODE  memory
 120 bytes of CONST memory
  81 bytes of DATA  memory

Errors: none
Warnings: none
