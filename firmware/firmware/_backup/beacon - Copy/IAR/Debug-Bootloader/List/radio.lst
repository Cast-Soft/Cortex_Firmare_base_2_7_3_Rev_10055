###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     21/Mar/2019  12:17:19 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\App\radio.c                                         #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\App\radio.c" -D BEACON_APP -D USE_STDPERIPH_DRIVER  #
#                    -D STM32F10X_CL -D COOS -D USE_MY_ASSERT -D BC_HW_REVJ   #
#                    -D _DEBUG -D BOOTLOADER -D EE_M24C02 -D TASKS_PROFILE    #
#                    -D BATTERY_CHECK -D CCA_EN_NO -D NEW_BEACON -D USE_TIM4  #
#                    -D WDT_ENABLE -D OLD_CONFIG -D CIRCULAR_LOG -D           #
#                    msgmethod1 -lcN "C:\Users\User\Documents\Cortex_git\BLKT #
#                    -01.git\Source Code\BLKT-01                              #
#                    Beacon\Source\firmware\beacon -                          #
#                    Copy\IAR\Debug-Bootloader\List\" -o                      #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\" --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\Source Code\BLKT-01 Beacon\Source\firmware\beacon -    #
#                    Copy\IAR\..\App\" -I "C:\Users\User\Documents\Cortex_git #
#                    \BLKT-01.git\Source Code\BLKT-01                         #
#                    Beacon\Source\firmware\beacon -                          #
#                    Copy\IAR\..\..\common\CMSIS\CM3\DeviceSupport\ST\STM32F1 #
#                    0x\" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\ #
#                    Source Code\BLKT-01 Beacon\Source\firmware\beacon -      #
#                    Copy\IAR\..\..\common\STM32F10x_StdPeriph_Driver\inc\"   #
#                    -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Sourc #
#                    e Code\BLKT-01 Beacon\Source\firmware\beacon -           #
#                    Copy\IAR\..\..\common\CoOS\kernel\" -I                   #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\CoOS\portable\" -I                 #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\..\common\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\USB-Device-CDC\" -I                #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\" -I "C:\Users\User\Documents\Cort #
#                    ex_git\BLKT-01.git\Source Code\BLKT-01                   #
#                    Beacon\Source\firmware\beacon - Copy\IAR\" -On           #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\List\radio.lst                 #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\radio.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source Code\BLKT-01 Beacon\Source\firmware\beacon - Copy\App\radio.c
      1          /********************  All title and rights are owned by  *********************
      2          *******  the CAST Group of Companies Inc. or licensors thereto. ***************
      3          *******************************************************************************
      4          * File Name          : imu_radio.c
      5          * Author             : ?
      6          * Version            : V1.0
      7          * Date               : 6/2/2011
      8          * Description        : All routines related to CC2520 Radio
      9          *******************************************************************************/
     10          
     11          /* INCLUDES ------------------------------------------------------------------*/
     12          
     13          #include "hardware.h"
     14          #include "radio.h"
     15          #include "radio_defs.h"
     16          #include "imu_defs.h"
     17          #include "CoOS.h"
     18          
     19          /* PRIVATE TYPEDEF -----------------------------------------------------------*/
     20          
     21          /* PRIVATE DEFINES -----------------------------------------------------------*/
     22          
     23          /* PRIVATE MACROS ------------------------------------------------------------*/
     24          
     25          /* EXTERN VARIABLES ----------------------------------------------------------*/
     26          
     27          /* PRIVATE VARIABLES ---------------------------------------------------------*/
     28          
     29          // Recommended register settings which differ from the data sheet
     30          
     31          /* PUBLIC VARIABLES ----------------------------------------------------------*/
     32          
     33          /* EXTERNAL FUNCTION PROTOTYPES ---------------------------------------------*/
     34          
     35          /* PRIVATE FUNCTION PROTOTYPES -----------------------------------------------*/
     36          
     37          static uint8_t          TK_BK_SPI_RX(void);
     38          static void             TK_BK_SPI_TX(uint8_t x);
     39          static uint8_t          TK_BK_SPI_TXRX(uint8_t x);
     40          void TK_BK_SPI_WAIT_RXRDY(void);
     41          
     42          /* PRIVATE FUNCTIONS ---------------------------------------------------------*/
     43          
     44          /*******************************************************************************
     45          * Description :
     46          * Input       : -
     47          * Return      :
     48          *******************************************************************************/
     49          static uint8_t TK_BK_SPI_RX(void) {
     50          #ifndef BC_HW_REVJ
     51              return (SPI_I2S_ReceiveData(SPI_RADIO_SPI));
     52          #else
     53          	return (SPI_I2S_ReceiveData(SPI_RADIO_IMU_SPI));
     54          #endif
     55          }
     56          
     57          /*******************************************************************************
     58          * Description :
     59          * Input       :
     60          * Return      : -
     61          *******************************************************************************/
     62          static void TK_BK_SPI_TX(uint8_t x) {
     63          #ifndef BC_HW_REVJ
     64              SPI_I2S_SendData(SPI_RADIO_SPI, x);
     65          #else
     66          	SPI_I2S_SendData(SPI_RADIO_IMU_SPI, x);
     67          #endif
     68          }
     69          
     70          /*******************************************************************************
     71          * Description :
     72          * Input       :
     73          * Return      :
     74          *******************************************************************************/
     75          static uint8_t TK_BK_SPI_TXRX(uint8_t x) {
     76              TK_BK_SPI_TX(x);
     77              TK_BK_SPI_WAIT_RXRDY();
     78              return TK_BK_SPI_RX();
     79          }
     80          
     81          /*******************************************************************************
     82          * Description :
     83          * Input       : -
     84          * Return      : -
     85          *******************************************************************************/
     86          void TK_BK_SPI_WAIT_RXRDY(void) {
     87          #ifndef BC_HW_REVJ
     88              while (RESET == SPI_I2S_GetFlagStatus(SPI_RADIO_SPI, SPI_I2S_FLAG_RXNE));
     89          #else
     90          	while (RESET == SPI_I2S_GetFlagStatus(SPI_RADIO_IMU_SPI, SPI_I2S_FLAG_RXNE));
     91          #endif
     92          }
     93          
     94          /* PUBLIC FUNCTIONS ----------------------------------------------------------*/
     95          
     96          /*******************************************************************************
     97          * Description :
     98          * Input       :
     99          * Return      :
    100          *******************************************************************************/
    101          uint8_t Send_SPI_byte(uint16_t s_data) {
    102              HwSPISSAssert(SPI_RADIO);
    103              uint8_t r_status = TK_BK_SPI_TXRX(s_data);
    104              HwSPISSDeAssert(SPI_RADIO);
    105              return (r_status);
    106          }
    107          
    108          /*******************************************************************************
    109          * Description :
    110          * Input       :
    111          * Return      : -
    112          *******************************************************************************/
    113          void Send_SPI_2byte(uint16_t command, uint16_t s_data) {
    114              HwSPISSAssert(SPI_RADIO);
    115              TK_BK_SPI_TXRX(command);
    116              TK_BK_SPI_TXRX(s_data);
    117              HwSPISSDeAssert(SPI_RADIO);
    118          }
    119          
    120          /*******************************************************************************
    121          * Description : Write memory 8 bits
    122          * Input       :
    123          * Return      : -
    124          *******************************************************************************/
    125          void TK_BK_MEMWR8(uint16_t addr, uint8_t value) {
    126              HwSPISSAssert(SPI_RADIO);
    127              TK_BK_SPI_TXRX(CC2520_INS_MEMWR | HI_UINT16(addr));
    128              TK_BK_SPI_TXRX(LO_UINT16(addr));
    129              TK_BK_SPI_TXRX(value);
    130              HwSPISSDeAssert(SPI_RADIO);
    131          }
    132          
    133          uint8_t TK_BK_MEMRD8(uint16_t addr) {
    134              HwSPISSAssert(SPI_RADIO);
    135              TK_BK_SPI_TXRX(CC2520_INS_MEMRD | HI_UINT16(addr));
    136              TK_BK_SPI_TXRX(LO_UINT16(addr));
    137              uint8_t value = TK_BK_SPI_TXRX(0x00);
    138              HwSPISSDeAssert(SPI_RADIO);
    139              return value;
    140          }
    141          /*******************************************************************************
    142          * Description : Write memory 16 bits
    143          * Input       :
    144          * Return      : -
    145          *******************************************************************************/
    146          void TK_BK_MEMWR16(uint16_t addr, uint16_t value) {
    147              HwSPISSAssert(SPI_RADIO);
    148              TK_BK_SPI_TXRX(CC2520_INS_MEMWR | HI_UINT16(addr));
    149              TK_BK_SPI_TXRX(LO_UINT16(addr));
    150              TK_BK_SPI_TXRX(LO_UINT16(value));
    151              TK_BK_SPI_TXRX(HI_UINT16(value));
    152              HwSPISSDeAssert(SPI_RADIO);
    153          }
    154          
    155          /*******************************************************************************
    156          * Description : Read one register byte
    157          * Input       :
    158          * Return      :
    159          *******************************************************************************/
    160          uint8_t TK_BK_REGRD8(uint8_t addr) {
    161              assert(!(addr & ~0x3F));
    162              HwSPISSAssert(SPI_RADIO);
    163              TK_BK_SPI_TXRX(CC2520_INS_REGRD | addr);
    164              uint8_t value = TK_BK_SPI_TXRX(0x00);
    165              HwSPISSDeAssert(SPI_RADIO);
    166              return value;
    167          }
    168          
    169          /*******************************************************************************
    170          * Description : Write one register byte
    171          * Input       :
    172          * Return      : -
    173          *******************************************************************************/
    174          void TK_BK_REGWR8(uint8_t addr, uint8_t value) {
    175              assert(!(addr & ~0x3F));
    176              HwSPISSAssert(SPI_RADIO);
    177              TK_BK_SPI_TXRX(CC2520_INS_REGWR | addr);
    178              TK_BK_SPI_TXRX(value);
    179              HwSPISSDeAssert(SPI_RADIO);
    180              return;
    181          }
    182          
    183          #ifdef BC_HW_REVJ
    184          uint8_t IMU_ReadOneByte(uint8_t reg, uint8_t Data){
    185          	reg = reg | 0x80;
    186          	HwSPISSAssert(SPI_IMU);
    187          	TK_BK_SPI_TXRX(reg);
    188          	uint8_t val = TK_BK_SPI_TXRX(Data);
    189          	HwSPISSDeAssert(SPI_IMU);
    190              return val;
    191          }
    192          
    193          void IMU_WriteOneByte(uint8_t reg, uint8_t Data){
    194          	reg = reg & 0x7F;
    195          	HwSPISSAssert(SPI_IMU);
    196          	TK_BK_SPI_TXRX(reg);
    197              TK_BK_SPI_TXRX(Data);
    198          	HwSPISSDeAssert(SPI_IMU);	
    199          }
    200          
    201          void IMU_SelectBank(uint8_t bank) {
    202          	IMU_WriteOneByte(IMU_REG_BANK_SEL, bank);
    203          }
    204          
    205          #endif
    206          
    207          uint32_t RadioGetRandom() {
    208              uint32_t ret = 0;
    209              HwSPISSAssert(SPI_RADIO);
    210              TK_BK_SPI_TXRX(CC2520_INS_RANDOM);
    211              for (int i = 0; i < 6; i++) {
    212                ret <<= 8;
    213                ret |= TK_BK_SPI_TXRX(0x00);
    214              }
    215              HwSPISSDeAssert(SPI_RADIO);
    216              return ret;
    217          }
    218          
    219          /******************* (C) COPYRIGHT 2011 NaturalPoint, Inc. *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  IMU_ReadOneByte
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
        8  IMU_SelectBank
              8 -> IMU_WriteOneByte
       16  IMU_WriteOneByte
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
       16  RadioGetRandom
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
       16  Send_SPI_2byte
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
       16  Send_SPI_byte
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
       16  TK_BK_MEMRD8
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
       16  TK_BK_MEMWR16
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
       16  TK_BK_MEMWR8
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
       16  TK_BK_REGRD8
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
             16 -> assert_failed
       16  TK_BK_REGWR8
             16 -> HwSPISSAssert
             16 -> HwSPISSDeAssert
             16 -> TK_BK_SPI_TXRX
             16 -> assert_failed
        8  TK_BK_SPI_RX
              8 -> SPI_I2S_ReceiveData
        8  TK_BK_SPI_TX
              8 -> SPI_I2S_SendData
        8  TK_BK_SPI_TXRX
              8 -> TK_BK_SPI_RX
              8 -> TK_BK_SPI_TX
              8 -> TK_BK_SPI_WAIT_RXRDY
        8  TK_BK_SPI_WAIT_RXRDY
              8 -> SPI_I2S_GetFlagStatus


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     116  ?<Constant "C:\\Users\\User\\Documen...">
       4  ??DataTable4
       4  ??DataTable4_1
      46  IMU_ReadOneByte
      16  IMU_SelectBank
      40  IMU_WriteOneByte
      48  RadioGetRandom
      36  Send_SPI_2byte
      32  Send_SPI_byte
      52  TK_BK_MEMRD8
      60  TK_BK_MEMWR16
      50  TK_BK_MEMWR8
      54  TK_BK_REGRD8
      52  TK_BK_REGWR8
      12  TK_BK_SPI_RX
      18  TK_BK_SPI_TX
      22  TK_BK_SPI_TXRX
      16  TK_BK_SPI_WAIT_RXRDY

 
 116 bytes in section .rodata
 562 bytes in section .text
 
 562 bytes of CODE  memory
 116 bytes of CONST memory

Errors: none
Warnings: none
