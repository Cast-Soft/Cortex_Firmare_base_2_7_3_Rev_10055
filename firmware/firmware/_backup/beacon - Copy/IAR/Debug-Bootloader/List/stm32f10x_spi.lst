###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     21/Mar/2019  12:17:23 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\common\STM32F10x_Std #
#                    Periph_Driver\src\stm32f10x_spi.c                        #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\common\STM32F10x_Std #
#                    Periph_Driver\src\stm32f10x_spi.c" -D BEACON_APP -D      #
#                    USE_STDPERIPH_DRIVER -D STM32F10X_CL -D COOS -D          #
#                    USE_MY_ASSERT -D BC_HW_REVJ -D _DEBUG -D BOOTLOADER -D   #
#                    EE_M24C02 -D TASKS_PROFILE -D BATTERY_CHECK -D           #
#                    CCA_EN_NO -D NEW_BEACON -D USE_TIM4 -D WDT_ENABLE -D     #
#                    OLD_CONFIG -D CIRCULAR_LOG -D msgmethod1 -lcN            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\List\" -o                      #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\" --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\Source Code\BLKT-01 Beacon\Source\firmware\beacon -    #
#                    Copy\IAR\..\App\" -I "C:\Users\User\Documents\Cortex_git #
#                    \BLKT-01.git\Source Code\BLKT-01                         #
#                    Beacon\Source\firmware\beacon -                          #
#                    Copy\IAR\..\..\common\CMSIS\CM3\DeviceSupport\ST\STM32F1 #
#                    0x\" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\ #
#                    Source Code\BLKT-01 Beacon\Source\firmware\beacon -      #
#                    Copy\IAR\..\..\common\STM32F10x_StdPeriph_Driver\inc\"   #
#                    -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Sourc #
#                    e Code\BLKT-01 Beacon\Source\firmware\beacon -           #
#                    Copy\IAR\..\..\common\CoOS\kernel\" -I                   #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\CoOS\portable\" -I                 #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\..\common\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\USB-Device-CDC\" -I                #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\" -I "C:\Users\User\Documents\Cort #
#                    ex_git\BLKT-01.git\Source Code\BLKT-01                   #
#                    Beacon\Source\firmware\beacon - Copy\IAR\" -On           #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\List\stm32f10x_spi.lst         #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\stm32f10x_spi.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source Code\BLKT-01 Beacon\Source\firmware\common\STM32F10x_StdPeriph_Driver\src\stm32f10x_spi.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f10x_spi.c
      4            * @author  MCD Application Team
      5            * @version V3.5.0
      6            * @date    11-March-2011
      7            * @brief   This file provides all the SPI firmware functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f10x_spi.h"
     24          #include "stm32f10x_rcc.h"
     25          
     26          /** @addtogroup STM32F10x_StdPeriph_Driver
     27            * @{
     28            */
     29          
     30          /** @defgroup SPI 
     31            * @brief SPI driver modules
     32            * @{
     33            */
     34          
     35          /** @defgroup SPI_Private_TypesDefinitions
     36            * @{
     37            */
     38          
     39          /**
     40            * @}
     41            */
     42          
     43          /** @defgroup SPI_Private_Defines
     44            * @{
     45            */
     46          
     47          /* SPI SPE mask */
     48          #define CR1_SPE_Set          ((uint16_t)0x0040)
     49          #define CR1_SPE_Reset        ((uint16_t)0xFFBF)
     50          
     51          /* I2S I2SE mask */
     52          #define I2SCFGR_I2SE_Set     ((uint16_t)0x0400)
     53          #define I2SCFGR_I2SE_Reset   ((uint16_t)0xFBFF)
     54          
     55          /* SPI CRCNext mask */
     56          #define CR1_CRCNext_Set      ((uint16_t)0x1000)
     57          
     58          /* SPI CRCEN mask */
     59          #define CR1_CRCEN_Set        ((uint16_t)0x2000)
     60          #define CR1_CRCEN_Reset      ((uint16_t)0xDFFF)
     61          
     62          /* SPI SSOE mask */
     63          #define CR2_SSOE_Set         ((uint16_t)0x0004)
     64          #define CR2_SSOE_Reset       ((uint16_t)0xFFFB)
     65          
     66          /* SPI registers Masks */
     67          #define CR1_CLEAR_Mask       ((uint16_t)0x3040)
     68          #define I2SCFGR_CLEAR_Mask   ((uint16_t)0xF040)
     69          
     70          /* SPI or I2S mode selection masks */
     71          #define SPI_Mode_Select      ((uint16_t)0xF7FF)
     72          #define I2S_Mode_Select      ((uint16_t)0x0800)
     73          
     74          /* I2S clock source selection masks */
     75          #define I2S2_CLOCK_SRC       ((uint32_t)(0x00020000))
     76          #define I2S3_CLOCK_SRC       ((uint32_t)(0x00040000))
     77          #define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
     78          #define I2S_DIV_MASK         ((uint32_t)(0x000000F0))
     79          
     80          /**
     81            * @}
     82            */
     83          
     84          /** @defgroup SPI_Private_Macros
     85            * @{
     86            */
     87          
     88          /**
     89            * @}
     90            */
     91          
     92          /** @defgroup SPI_Private_Variables
     93            * @{
     94            */
     95          
     96          /**
     97            * @}
     98            */
     99          
    100          /** @defgroup SPI_Private_FunctionPrototypes
    101            * @{
    102            */
    103          
    104          /**
    105            * @}
    106            */
    107          
    108          /** @defgroup SPI_Private_Functions
    109            * @{
    110            */
    111          
    112          /**
    113            * @brief  Deinitializes the SPIx peripheral registers to their default
    114            *         reset values (Affects also the I2Ss).
    115            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    116            * @retval None
    117            */
    118          
    119          void SPI_I2S_DeInit(SPI_TypeDef *SPIx) {
    120              /* Check the parameters */
    121              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    122          
    123              if (SPIx == SPI1) {
    124                  /* Enable SPI1 reset state */
    125                  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    126                  /* Release SPI1 from reset state */
    127                  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
    128              } else if (SPIx == SPI2) {
    129                  /* Enable SPI2 reset state */
    130                  RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
    131                  /* Release SPI2 from reset state */
    132                  RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
    133              } else {
    134                  if (SPIx == SPI3) {
    135                      /* Enable SPI3 reset state */
    136                      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
    137                      /* Release SPI3 from reset state */
    138                      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    139                  }
    140              }
    141          }
    142          
    143          /**
    144            * @brief  Initializes the SPIx peripheral according to the specified 
    145            *         parameters in the SPI_InitStruct.
    146            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    147            * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
    148            *         contains the configuration information for the specified SPI peripheral.
    149            * @retval None
    150            */
    151          void SPI_Init(SPI_TypeDef *SPIx, SPI_InitTypeDef *SPI_InitStruct) {
    152              uint16_t tmpreg = 0;
    153          
    154              /* check the parameters */
    155              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    156          
    157              /* Check the SPI parameters */
    158              assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
    159              assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
    160              assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
    161              assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
    162              assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
    163              assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
    164              assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
    165              assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
    166              assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
    167          
    168              /*---------------------------- SPIx CR1 Configuration ------------------------*/
    169              /* Get the SPIx CR1 value */
    170              tmpreg = SPIx->CR1;
    171              /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
    172              tmpreg &= CR1_CLEAR_Mask;
    173              /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
    174                 master/salve mode, CPOL and CPHA */
    175              /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
    176              /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
    177              /* Set LSBFirst bit according to SPI_FirstBit value */
    178              /* Set BR bits according to SPI_BaudRatePrescaler value */
    179              /* Set CPOL bit according to SPI_CPOL value */
    180              /* Set CPHA bit according to SPI_CPHA value */
    181              tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode
    182                  | SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL | SPI_InitStruct->SPI_CPHA
    183                  | SPI_InitStruct->SPI_NSS | SPI_InitStruct->SPI_BaudRatePrescaler
    184                  | SPI_InitStruct->SPI_FirstBit);
    185              /* Write to SPIx CR1 */
    186              SPIx->CR1 = tmpreg;
    187          
    188              /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    189              SPIx->I2SCFGR &= SPI_Mode_Select;
    190          
    191              /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
    192              /* Write to SPIx CRCPOLY */
    193              SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
    194          }
    195          
    196          /**
    197            * @brief  Initializes the SPIx peripheral according to the specified 
    198            *         parameters in the I2S_InitStruct.
    199            * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral
    200            *         (configured in I2S mode).
    201            * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
    202            *         contains the configuration information for the specified SPI peripheral
    203            *         configured in I2S mode.
    204            * @note
    205            *  The function calculates the optimal prescaler needed to obtain the most 
    206            *  accurate audio frequency (depending on the I2S clock source, the PLL values 
    207            *  and the product configuration). But in case the prescaler value is greater 
    208            *  than 511, the default value (0x02) will be configured instead.  *   
    209            * @retval None
    210            */
    211          void I2S_Init(SPI_TypeDef *SPIx, I2S_InitTypeDef *I2S_InitStruct) {
    212              uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
    213              uint32_t tmp = 0;
    214              RCC_ClocksTypeDef RCC_Clocks;
    215              uint32_t sourceclock = 0;
    216          
    217              /* Check the I2S parameters */
    218              assert_param(IS_SPI_23_PERIPH(SPIx));
    219              assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
    220              assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
    221              assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
    222              assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
    223              assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
    224              assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));
    225          
    226              /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
    227              /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    228              SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask;
    229              SPIx->I2SPR = 0x0002;
    230          
    231              /* Get the I2SCFGR register value */
    232              tmpreg = SPIx->I2SCFGR;
    233          
    234              /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
    235              if (I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default) {
    236                  i2sodd = (uint16_t)0;
    237                  i2sdiv = (uint16_t)2;
    238              }
    239              /* If the requested audio frequency is not the default, compute the prescaler */
    240              else {
    241                  /* Check the frame length (For the Prescaler computing) */
    242                  if (I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b) {
    243                      /* Packet length is 16 bits */
    244                      packetlength = 1;
    245                  } else {
    246                      /* Packet length is 32 bits */
    247                      packetlength = 2;
    248                  }
    249          
    250                  /* Get the I2S clock source mask depending on the peripheral number */
    251                  if (((uint32_t)SPIx) == SPI2_BASE) {
    252                      /* The mask is relative to I2S2 */
    253                      tmp = I2S2_CLOCK_SRC;
    254                  } else {
    255                      /* The mask is relative to I2S3 */
    256                      tmp = I2S3_CLOCK_SRC;
    257                  }
    258          
    259          /* Check the I2S clock source configuration depending on the Device:
    260             Only Connectivity line devices have the PLL3 VCO clock */
    261          #ifdef STM32F10X_CL
    262          
    263                  if ((RCC->CFGR2 & tmp) != 0) {
    264                      /* Get the configuration bits of RCC PLL3 multiplier */
    265                      tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
    266          
    267                      /* Get the value of the PLL3 multiplier */
    268                      if ((tmp > 5) && (tmp < 15)) {
    269                          /* Multiplier is between 8 and 14 (value 15 is forbidden) */
    270                          tmp += 2;
    271                      } else {
    272                          if (tmp == 15) {
    273                              /* Multiplier is 20 */
    274                              tmp = 20;
    275                          }
    276                      }
    277                      /* Get the PREDIV2 value */
    278                      sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
    279          
    280                      /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
    281                      sourceclock = (uint32_t)((HSE_Value / sourceclock) * tmp * 2);
    282                  } else {
    283                      /* I2S Clock source is System clock: Get System Clock frequency */
    284                      RCC_GetClocksFreq(&RCC_Clocks);
    285          
    286                      /* Get the source clock value: based on System Clock value */
    287                      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    288                  }
    289          #else /* STM32F10X_HD */
    290                  /* I2S Clock source is System clock: Get System Clock frequency */
    291          
    292                  RCC_GetClocksFreq(&RCC_Clocks);
    293          
    294                  /* Get the source clock value: based on System Clock value */
    295                  sourceclock = RCC_Clocks.SYSCLK_Frequency;
    296          
    297          #endif /* STM32F10X_CL */
    298          
    299                  /* Compute the Real divider depending on the MCLK output state with a floating point */
    300          
    301                  if (I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable) {
    302                      /* MCLK output is enabled */
    303                      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    304                  } else {
    305                      /* MCLK output is disabled */
    306                      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) * 10)
    307                          / I2S_InitStruct->I2S_AudioFreq)) + 5);
    308                  }
    309          
    310                  /* Remove the floating point */
    311                  tmp = tmp / 10;
    312          
    313                  /* Check the parity of the divider */
    314                  i2sodd = (uint16_t)(tmp &(uint16_t)0x0001);
    315          
    316                  /* Compute the i2sdiv prescaler */
    317                  i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
    318          
    319                  /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    320                  i2sodd = (uint16_t)(i2sodd << 8);
    321              }
    322          
    323              /* Test if the divider is 1 or 0 or greater than 0xFF */
    324              if ((i2sdiv < 2) || (i2sdiv > 0xFF)) {
    325                  /* Set the default values */
    326                  i2sdiv = 2;
    327                  i2sodd = 0;
    328              }
    329          
    330              /* Write to SPIx I2SPR register the computed value */
    331              SPIx->I2SPR =
    332                  (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
    333          
    334              /* Configure the I2S with the SPI_InitStruct values */
    335              tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode |          \
    336              (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
    337              (uint16_t)I2S_InitStruct->I2S_CPOL))));
    338          
    339              /* Write to SPIx I2SCFGR */
    340              SPIx->I2SCFGR = tmpreg;
    341          }
    342          
    343          /**
    344            * @brief  Fills each SPI_InitStruct member with its default value.
    345            * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
    346            * @retval None
    347            */
    348          void SPI_StructInit(SPI_InitTypeDef *SPI_InitStruct) {
    349              /*--------------- Reset SPI init structure parameters values -----------------*/
    350              /* Initialize the SPI_Direction member */
    351              SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    352              /* initialize the SPI_Mode member */
    353              SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
    354              /* initialize the SPI_DataSize member */
    355              SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
    356              /* Initialize the SPI_CPOL member */
    357              SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
    358              /* Initialize the SPI_CPHA member */
    359              SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
    360              /* Initialize the SPI_NSS member */
    361              SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
    362              /* Initialize the SPI_BaudRatePrescaler member */
    363              SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
    364              /* Initialize the SPI_FirstBit member */
    365              SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
    366              /* Initialize the SPI_CRCPolynomial member */
    367              SPI_InitStruct->SPI_CRCPolynomial = 7;
    368          }
    369          
    370          /**
    371            * @brief  Fills each I2S_InitStruct member with its default value.
    372            * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
    373            * @retval None
    374            */
    375          void I2S_StructInit(I2S_InitTypeDef *I2S_InitStruct) {
    376              /*--------------- Reset I2S init structure parameters values -----------------*/
    377              /* Initialize the I2S_Mode member */
    378              I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
    379          
    380              /* Initialize the I2S_Standard member */
    381              I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
    382          
    383              /* Initialize the I2S_DataFormat member */
    384              I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
    385          
    386              /* Initialize the I2S_MCLKOutput member */
    387              I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
    388          
    389              /* Initialize the I2S_AudioFreq member */
    390              I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
    391          
    392              /* Initialize the I2S_CPOL member */
    393              I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
    394          }
    395          
    396          /**
    397            * @brief  Enables or disables the specified SPI peripheral.
    398            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    399            * @param  NewState: new state of the SPIx peripheral. 
    400            *   This parameter can be: ENABLE or DISABLE.
    401            * @retval None
    402            */
    403          void SPI_Cmd(SPI_TypeDef *SPIx, FunctionalState NewState) {
    404              /* Check the parameters */
    405              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    406              assert_param(IS_FUNCTIONAL_STATE(NewState));
    407          
    408              if (NewState != DISABLE) {
    409                  /* Enable the selected SPI peripheral */
    410                  SPIx->CR1 |= CR1_SPE_Set;
    411              } else {
    412                  /* Disable the selected SPI peripheral */
    413                  SPIx->CR1 &= CR1_SPE_Reset;
    414              }
    415          }
    416          
    417          /**
    418            * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
    419            * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral.
    420            * @param  NewState: new state of the SPIx peripheral. 
    421            *   This parameter can be: ENABLE or DISABLE.
    422            * @retval None
    423            */
    424          void I2S_Cmd(SPI_TypeDef *SPIx, FunctionalState NewState) {
    425              /* Check the parameters */
    426              assert_param(IS_SPI_23_PERIPH(SPIx));
    427              assert_param(IS_FUNCTIONAL_STATE(NewState));
    428          
    429              if (NewState != DISABLE) {
    430                  /* Enable the selected SPI peripheral (in I2S mode) */
    431                  SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
    432              } else {
    433                  /* Disable the selected SPI peripheral (in I2S mode) */
    434                  SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
    435              }
    436          }
    437          
    438          /**
    439            * @brief  Enables or disables the specified SPI/I2S interrupts.
    440            * @param  SPIx: where x can be
    441            *   - 1, 2 or 3 in SPI mode 
    442            *   - 2 or 3 in I2S mode
    443            * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to be enabled or disabled. 
    444            *   This parameter can be one of the following values:
    445            *     @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
    446            *     @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
    447            *     @arg SPI_I2S_IT_ERR: Error interrupt mask
    448            * @param  NewState: new state of the specified SPI/I2S interrupt.
    449            *   This parameter can be: ENABLE or DISABLE.
    450            * @retval None
    451            */
    452          void SPI_I2S_ITConfig(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState) {
    453              uint16_t itpos = 0, itmask = 0;
    454              /* Check the parameters */
    455              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    456              assert_param(IS_FUNCTIONAL_STATE(NewState));
    457              assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
    458          
    459              /* Get the SPI/I2S IT index */
    460              itpos = SPI_I2S_IT >> 4;
    461          
    462              /* Set the IT mask */
    463              itmask = (uint16_t)1 << (uint16_t)itpos;
    464          
    465              if (NewState != DISABLE) {
    466                  /* Enable the selected SPI/I2S interrupt */
    467                  SPIx->CR2 |= itmask;
    468              } else {
    469                  /* Disable the selected SPI/I2S interrupt */
    470                  SPIx->CR2 &= (uint16_t)~itmask;
    471              }
    472          }
    473          
    474          /**
    475            * @brief  Enables or disables the SPIx/I2Sx DMA interface.
    476            * @param  SPIx: where x can be
    477            *   - 1, 2 or 3 in SPI mode 
    478            *   - 2 or 3 in I2S mode
    479            * @param  SPI_I2S_DMAReq: specifies the SPI/I2S DMA transfer request to be enabled or disabled. 
    480            *   This parameter can be any combination of the following values:
    481            *     @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
    482            *     @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
    483            * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
    484            *   This parameter can be: ENABLE or DISABLE.
    485            * @retval None
    486            */
    487          void SPI_I2S_DMACmd(SPI_TypeDef *SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState) {
    488              /* Check the parameters */
    489              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    490              assert_param(IS_FUNCTIONAL_STATE(NewState));
    491              assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
    492          
    493              if (NewState != DISABLE) {
    494                  /* Enable the selected SPI/I2S DMA requests */
    495                  SPIx->CR2 |= SPI_I2S_DMAReq;
    496              } else {
    497                  /* Disable the selected SPI/I2S DMA requests */
    498                  SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
    499              }
    500          }
    501          
    502          /**
    503            * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
    504            * @param  SPIx: where x can be
    505            *   - 1, 2 or 3 in SPI mode 
    506            *   - 2 or 3 in I2S mode
    507            * @param  Data : Data to be transmitted.
    508            * @retval None
    509            */
    510          void SPI_I2S_SendData(SPI_TypeDef *SPIx, uint16_t Data) {
    511              /* Check the parameters */
    512              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    513          
    514              /* Write in the DR register the data to be sent */
    515              SPIx->DR = Data;
    516          }
    517          
    518          /**
    519            * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
    520            * @param  SPIx: where x can be
    521            *   - 1, 2 or 3 in SPI mode 
    522            *   - 2 or 3 in I2S mode
    523            * @retval The value of the received data.
    524            */
    525          uint16_t SPI_I2S_ReceiveData(SPI_TypeDef *SPIx) {
    526              /* Check the parameters */
    527              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    528          
    529              /* Return the data in the DR register */
    530              return SPIx->DR;
    531          }
    532          
    533          /**
    534            * @brief  Configures internally by software the NSS pin for the selected SPI.
    535            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    536            * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
    537            *   This parameter can be one of the following values:
    538            *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
    539            *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
    540            * @retval None
    541            */
    542          void SPI_NSSInternalSoftwareConfig(SPI_TypeDef *SPIx, uint16_t SPI_NSSInternalSoft) {
    543              /* Check the parameters */
    544              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    545              assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
    546          
    547              if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset) {
    548                  /* Set NSS pin internally by software */
    549                  SPIx->CR1 |= SPI_NSSInternalSoft_Set;
    550              } else {
    551                  /* Reset NSS pin internally by software */
    552                  SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
    553              }
    554          }
    555          
    556          /**
    557            * @brief  Enables or disables the SS output for the selected SPI.
    558            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    559            * @param  NewState: new state of the SPIx SS output. 
    560            *   This parameter can be: ENABLE or DISABLE.
    561            * @retval None
    562            */
    563          void SPI_SSOutputCmd(SPI_TypeDef *SPIx, FunctionalState NewState) {
    564              /* Check the parameters */
    565              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    566              assert_param(IS_FUNCTIONAL_STATE(NewState));
    567          
    568              if (NewState != DISABLE) {
    569                  /* Enable the selected SPI SS output */
    570                  SPIx->CR2 |= CR2_SSOE_Set;
    571              } else {
    572                  /* Disable the selected SPI SS output */
    573                  SPIx->CR2 &= CR2_SSOE_Reset;
    574              }
    575          }
    576          
    577          /**
    578            * @brief  Configures the data size for the selected SPI.
    579            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    580            * @param  SPI_DataSize: specifies the SPI data size.
    581            *   This parameter can be one of the following values:
    582            *     @arg SPI_DataSize_16b: Set data frame format to 16bit
    583            *     @arg SPI_DataSize_8b: Set data frame format to 8bit
    584            * @retval None
    585            */
    586          void SPI_DataSizeConfig(SPI_TypeDef *SPIx, uint16_t SPI_DataSize) {
    587              /* Check the parameters */
    588              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    589              assert_param(IS_SPI_DATASIZE(SPI_DataSize));
    590              /* Clear DFF bit */
    591              SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
    592              /* Set new DFF bit value */
    593              SPIx->CR1 |= SPI_DataSize;
    594          }
    595          
    596          /**
    597            * @brief  Transmit the SPIx CRC value.
    598            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    599            * @retval None
    600            */
    601          void SPI_TransmitCRC(SPI_TypeDef *SPIx) {
    602              /* Check the parameters */
    603              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    604          
    605              /* Enable the selected SPI CRC transmission */
    606              SPIx->CR1 |= CR1_CRCNext_Set;
    607          }
    608          
    609          /**
    610            * @brief  Enables or disables the CRC value calculation of the transferred bytes.
    611            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    612            * @param  NewState: new state of the SPIx CRC value calculation.
    613            *   This parameter can be: ENABLE or DISABLE.
    614            * @retval None
    615            */
    616          void SPI_CalculateCRC(SPI_TypeDef *SPIx, FunctionalState NewState) {
    617              /* Check the parameters */
    618              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    619              assert_param(IS_FUNCTIONAL_STATE(NewState));
    620          
    621              if (NewState != DISABLE) {
    622                  /* Enable the selected SPI CRC calculation */
    623                  SPIx->CR1 |= CR1_CRCEN_Set;
    624              } else {
    625                  /* Disable the selected SPI CRC calculation */
    626                  SPIx->CR1 &= CR1_CRCEN_Reset;
    627              }
    628          }
    629          
    630          /**
    631            * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
    632            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    633            * @param  SPI_CRC: specifies the CRC register to be read.
    634            *   This parameter can be one of the following values:
    635            *     @arg SPI_CRC_Tx: Selects Tx CRC register
    636            *     @arg SPI_CRC_Rx: Selects Rx CRC register
    637            * @retval The selected CRC register value..
    638            */
    639          uint16_t SPI_GetCRC(SPI_TypeDef *SPIx, uint8_t SPI_CRC) {
    640              uint16_t crcreg = 0;
    641              /* Check the parameters */
    642              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    643              assert_param(IS_SPI_CRC(SPI_CRC));
    644          
    645              if (SPI_CRC != SPI_CRC_Rx) {
    646                  /* Get the Tx CRC register */
    647                  crcreg = SPIx->TXCRCR;
    648              } else {
    649                  /* Get the Rx CRC register */
    650                  crcreg = SPIx->RXCRCR;
    651              }
    652              /* Return the selected CRC register */
    653              return crcreg;
    654          }
    655          
    656          /**
    657            * @brief  Returns the CRC Polynomial register value for the specified SPI.
    658            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    659            * @retval The CRC Polynomial register value.
    660            */
    661          uint16_t SPI_GetCRCPolynomial(SPI_TypeDef *SPIx) {
    662              /* Check the parameters */
    663              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    664          
    665              /* Return the CRC polynomial register */
    666              return SPIx->CRCPR;
    667          }
    668          
    669          /**
    670            * @brief  Selects the data transfer direction in bi-directional mode for the specified SPI.
    671            * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
    672            * @param  SPI_Direction: specifies the data transfer direction in bi-directional mode. 
    673            *   This parameter can be one of the following values:
    674            *     @arg SPI_Direction_Tx: Selects Tx transmission direction
    675            *     @arg SPI_Direction_Rx: Selects Rx receive direction
    676            * @retval None
    677            */
    678          void SPI_BiDirectionalLineConfig(SPI_TypeDef *SPIx, uint16_t SPI_Direction) {
    679              /* Check the parameters */
    680              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    681              assert_param(IS_SPI_DIRECTION(SPI_Direction));
    682          
    683              if (SPI_Direction == SPI_Direction_Tx) {
    684                  /* Set the Tx only mode */
    685                  SPIx->CR1 |= SPI_Direction_Tx;
    686              } else {
    687                  /* Set the Rx only mode */
    688                  SPIx->CR1 &= SPI_Direction_Rx;
    689              }
    690          }
    691          
    692          /**
    693            * @brief  Checks whether the specified SPI/I2S flag is set or not.
    694            * @param  SPIx: where x can be
    695            *   - 1, 2 or 3 in SPI mode 
    696            *   - 2 or 3 in I2S mode
    697            * @param  SPI_I2S_FLAG: specifies the SPI/I2S flag to check. 
    698            *   This parameter can be one of the following values:
    699            *     @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
    700            *     @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
    701            *     @arg SPI_I2S_FLAG_BSY: Busy flag.
    702            *     @arg SPI_I2S_FLAG_OVR: Overrun flag.
    703            *     @arg SPI_FLAG_MODF: Mode Fault flag.
    704            *     @arg SPI_FLAG_CRCERR: CRC Error flag.
    705            *     @arg I2S_FLAG_UDR: Underrun Error flag.
    706            *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
    707            * @retval The new state of SPI_I2S_FLAG (SET or RESET).
    708            */
    709          FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef *SPIx, uint16_t SPI_I2S_FLAG) {
    710              FlagStatus bitstatus = RESET;
    711              /* Check the parameters */
    712              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    713              assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
    714              /* Check the status of the specified SPI/I2S flag */
    715              if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET) {
    716                  /* SPI_I2S_FLAG is set */
    717                  bitstatus = SET;
    718              } else {
    719                  /* SPI_I2S_FLAG is reset */
    720                  bitstatus = RESET;
    721              }
    722              /* Return the SPI_I2S_FLAG status */
    723              return bitstatus;
    724          }
    725          
    726          /**
    727            * @brief  Clears the SPIx CRC Error (CRCERR) flag.
    728            * @param  SPIx: where x can be
    729            *   - 1, 2 or 3 in SPI mode 
    730            * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
    731            *   This function clears only CRCERR flag.
    732            * @note
    733            *   - OVR (OverRun error) flag is cleared by software sequence: a read 
    734            *     operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
    735            *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
    736            *   - UDR (UnderRun error) flag is cleared by a read operation to 
    737            *     SPI_SR register (SPI_I2S_GetFlagStatus()).
    738            *   - MODF (Mode Fault) flag is cleared by software sequence: a read/write 
    739            *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
    740            *     write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
    741            * @retval None
    742            */
    743          void SPI_I2S_ClearFlag(SPI_TypeDef *SPIx, uint16_t SPI_I2S_FLAG) {
    744              /* Check the parameters */
    745              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    746              assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    747          
    748              /* Clear the selected SPI CRC Error (CRCERR) flag */
    749              SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
    750          }
    751          
    752          /**
    753            * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
    754            * @param  SPIx: where x can be
    755            *   - 1, 2 or 3 in SPI mode 
    756            *   - 2 or 3 in I2S mode
    757            * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to check. 
    758            *   This parameter can be one of the following values:
    759            *     @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
    760            *     @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
    761            *     @arg SPI_I2S_IT_OVR: Overrun interrupt.
    762            *     @arg SPI_IT_MODF: Mode Fault interrupt.
    763            *     @arg SPI_IT_CRCERR: CRC Error interrupt.
    764            *     @arg I2S_IT_UDR: Underrun Error interrupt.
    765            * @retval The new state of SPI_I2S_IT (SET or RESET).
    766            */
    767          ITStatus SPI_I2S_GetITStatus(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT) {
    768              ITStatus bitstatus = RESET;
    769              uint16_t itpos = 0, itmask = 0, enablestatus = 0;
    770          
    771              /* Check the parameters */
    772              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    773              assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
    774          
    775              /* Get the SPI/I2S IT index */
    776              itpos = 0x01 << (SPI_I2S_IT & 0x0F);
    777          
    778              /* Get the SPI/I2S IT mask */
    779              itmask = SPI_I2S_IT >> 4;
    780          
    781              /* Set the IT mask */
    782              itmask = 0x01 << itmask;
    783          
    784              /* Get the SPI_I2S_IT enable bit status */
    785              enablestatus = (SPIx->CR2 & itmask);
    786          
    787              /* Check the status of the specified SPI/I2S interrupt */
    788              if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus) {
    789                  /* SPI_I2S_IT is set */
    790                  bitstatus = SET;
    791              } else {
    792                  /* SPI_I2S_IT is reset */
    793                  bitstatus = RESET;
    794              }
    795              /* Return the SPI_I2S_IT status */
    796              return bitstatus;
    797          }
    798          
    799          /**
    800            * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
    801            * @param  SPIx: where x can be
    802            *   - 1, 2 or 3 in SPI mode 
    803            * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
    804            *   This function clears only CRCERR interrupt pending bit.   
    805            * @note
    806            *   - OVR (OverRun Error) interrupt pending bit is cleared by software 
    807            *     sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
    808            *     followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
    809            *   - UDR (UnderRun Error) interrupt pending bit is cleared by a read 
    810            *     operation to SPI_SR register (SPI_I2S_GetITStatus()).
    811            *   - MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
    812            *     a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
    813            *     followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
    814            *     the SPI).
    815            * @retval None
    816            */
    817          void SPI_I2S_ClearITPendingBit(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT) {
    818              uint16_t itpos = 0;
    819              /* Check the parameters */
    820              assert_param(IS_SPI_ALL_PERIPH(SPIx));
    821              assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
    822          
    823              /* Get the SPI IT index */
    824              itpos = 0x01 << (SPI_I2S_IT & 0x0F);
    825          
    826              /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
    827              SPIx->SR = (uint16_t)~itpos;
    828          }
    829          /**
    830            * @}
    831            */
    832          
    833          /**
    834            * @}
    835            */
    836          
    837          /**
    838            * @}
    839            */
    840          
    841          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  I2S_Cmd
       56  I2S_Init
             56 -> RCC_GetClocksFreq
        0  I2S_StructInit
        0  SPI_BiDirectionalLineConfig
        0  SPI_CalculateCRC
        0  SPI_Cmd
        0  SPI_DataSizeConfig
        0  SPI_GetCRC
        0  SPI_GetCRCPolynomial
        0  SPI_I2S_ClearFlag
        4  SPI_I2S_ClearITPendingBit
        0  SPI_I2S_DMACmd
        8  SPI_I2S_DeInit
              8 -> RCC_APB1PeriphResetCmd
              8 -> RCC_APB2PeriphResetCmd
        0  SPI_I2S_GetFlagStatus
       16  SPI_I2S_GetITStatus
        8  SPI_I2S_ITConfig
        0  SPI_I2S_ReceiveData
        0  SPI_I2S_SendData
        4  SPI_Init
        0  SPI_NSSInternalSoftwareConfig
        0  SPI_SSOutputCmd
        0  SPI_StructInit
        0  SPI_TransmitCRC


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
      28  I2S_Cmd
     332  I2S_Init
      26  I2S_StructInit
      30  SPI_BiDirectionalLineConfig
      28  SPI_CalculateCRC
      28  SPI_Cmd
      18  SPI_DataSizeConfig
      24  SPI_GetCRC
       4  SPI_GetCRCPolynomial
       8  SPI_I2S_ClearFlag
      24  SPI_I2S_ClearITPendingBit
      22  SPI_I2S_DMACmd
      88  SPI_I2S_DeInit
      24  SPI_I2S_GetFlagStatus
      70  SPI_I2S_GetITStatus
      44  SPI_I2S_ITConfig
       4  SPI_I2S_ReceiveData
       4  SPI_I2S_SendData
      64  SPI_Init
      32  SPI_NSSInternalSoftwareConfig
      28  SPI_SSOutputCmd
      38  SPI_StructInit
      10  SPI_TransmitCRC

 
 998 bytes in section .text
 
 998 bytes of CODE memory

Errors: none
Warnings: none
