###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     13/Nov/2019  10:52:16 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source        #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\App\main.c                                          #
#    Command line =  "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\App\main.c" -D BEACON_APP -D USE_STDPERIPH_DRIVER   #
#                    -D STM32F10X_CL -D COOS -D USE_MY_ASSERT -D _DEBUG -D    #
#                    BOOTLOADER -D EE_M24C02 -D TASKS_PROFILE -D              #
#                    BATTERY_CHECK -D CCA_EN_NO -D NEW_BEACON -D USE_TIM4 -D  #
#                    WDT_ENABLE -D OLD_CONFIG -D CIRCULAR_LOG -D BC_HW_REVJ   #
#                    -lcN "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source  #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\List\" -o                 #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\Obj\" --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\App\" -I "C:\Users\kmak\Documents\Cortex_Git #
#                    \BLKT-01\Source Code\BLKT-01                             #
#                    Beacon\Source\firmware\beacon -                          #
#                    revJ\IAR\..\..\common\CMSIS\CM3\DeviceSupport\ST\STM32F1 #
#                    0x\" -I "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Sour #
#                    ce Code\BLKT-01 Beacon\Source\firmware\beacon -          #
#                    revJ\IAR\..\..\common\STM32F10x_StdPeriph_Driver\inc\"   #
#                    -I "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\CoOS\kernel\" -I                   #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\CoOS\portable\" -I                 #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\..\common\" -I                            #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\USB-Device-CDC\" -I                #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\" -I "C:\Users\kmak\Documents\Cort #
#                    ex_Git\BLKT-01\Source Code\BLKT-01                       #
#                    Beacon\Source\firmware\beacon - revJ\IAR\" -On           #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source        #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\List\main.lst             #
#    Object file  =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source        #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\Obj\main.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\firmware\beacon - revJ\App\main.c
      1          /********************  All title and rights are owned by  *********************
      2          *******  the CAST Group of Companies Inc. or licensors thereto. ***************
      3          *******************************************************************************
      4          * File Name          : main.c
      5          * Author             : ?
      6          * Version            : V1.0
      7          * Date               : 6/2/2011
      8          * Description        : Main Application for BlackTrax:Beacon
      9          *******************************************************************************/
     10          
     11          /*
     12              LED1 : Toggle on RF Packet TX
     13              LED2 : Toggle on 50x RF Packet TX'es
     14              LED3 : Toggle on RF Packet RX
     15              LED4 : Toggle on 50x RF Packet RX'es
     16          */
     17          
     18          /* INCLUDES ------------------------------------------------------------------*/
     19          
     20          #include "hardware.h"
     21          #include "CoOS.h"
     22          #include "tasks.h"
     23          #include "basic_rf.h"
     24          #ifndef STDIO_TO_USART
     25          #include "usb_regs.h"
     26          #include "usbd_cdc_core.h"
     27          #include "usbd_usr.h"
     28          #include "usb_conf.h"
     29          #include "usbd_desc.h"
     30          #endif
     31          #include <stdio.h>
     32          #include <string.h>
     33          #include "stm32f10x_dac.h"
     34          #include "stm32f10x_rcc.h"
     35          
     36          #include "i2c_ee.h"
     37          #include "flash_map.h"
     38          #include "config.h"
     39          #include "i2c_periph.h"
     40          #include "eink.h"
     41          
     42          /* PRIVATE TYPEDEF -----------------------------------------------------------*/
     43          
     44          /* PRIVATE DEFINES -----------------------------------------------------------*/
     45          
     46          #define FIRMWARE_VERSION "0.6"
     47          
     48          #define OS_STACK_SIZE   256
     49          
     50          /* PRIVATE MACROS ------------------------------------------------------------*/
     51          
     52          /* EXTERN VARIABLES ----------------------------------------------------------*/
     53          extern uint32_t __vector_table;
     54          extern uint8_t bat_slot_numbers;
     55          
     56          /* PRIVATE VARIABLES ---------------------------------------------------------*/
     57          
     58          __ALIGN_BEGIN USB_OTG_CORE_HANDLE    USB_OTG_dev __ALIGN_END ;
     59          
     60          static OS_STK task1Stack[OS_STACK_SIZE];
     61          static OS_STK taskRadioRxStack[OS_STACK_SIZE];
     62          static OS_STK task3Stack[OS_STACK_SIZE];
     63          static OS_STK task4Stack[OS_STACK_SIZE];
     64          static OS_STK taskRadioTxStack[OS_STACK_SIZE];
     65          static OS_STK task8Stack[OS_STACK_SIZE];
     66          static OS_STK taskIMU_G_Stack[OS_STACK_SIZE];
     67          static OS_STK taskLED_Stack[OS_STACK_SIZE];
     68          static OS_STK taskUI_Stack[OS_STACK_SIZE];
     69          /* PUBLIC VARIABLES ----------------------------------------------------------*/
     70          
     71          #ifdef WDT_ENABLE
     72          uint8_t  watchdog_active = 1;
     73          #else
     74          uint8_t  watchdog_active = 0;
     75          #endif
     76          
     77          uint8_t asserted;
     78          const char firmwareVersion[] = FIRMWARE_VERSION;
     79          
     80          OS_TID task1Id;
     81          OS_TID taskRadioRxId;
     82          OS_TID task3Id;
     83          OS_TID taskConfigId;
     84          OS_TID taskRadioTxId;
     85          OS_TID task8Id;
     86          OS_TID taskIMUGId;
     87          OS_TID taskLEDId;
     88          OS_TID taskUIId;
     89          
     90          OS_FlagID flagIMUNewData = 0xFF;
     91          OS_FlagID flagIMU_G_DRDY = 0xFF;
     92          OS_FlagID flagRadioTxReq = 0xFF;
     93          OS_FlagID flagIMUTimeToSend = 0xFF;
     94          OS_FlagID flagRadioCCA = 0xFF;
     95          
     96          OS_FlagID  flagIMUDataReady = 0xFF;
     97          
     98          OS_EventID semRFRxFrames;   // Number of RF frames received in Rx-FIFO. It is notified by RX_FRM_DONE interrupt
     99          OS_EventID semInkUI;
    100          
    101          OS_FlagID flagLEDSync;
    102          OS_FlagID flagEInk_RDY;
    103          OS_FlagID flagEInk_DMA_Done;
    104          OS_FlagID flagBtn_UI;
    105          OS_FlagID flagLED_UI;
    106          OS_FlagID flagTimeout_UI;
    107          OS_FlagID flagUSBdata_UI;
    108          
    109          uint8_t* const led0Id = &config.led0Id;
    110          uint8_t* const led1Id = &config.led1Id;
    111          uint8_t* const led2Id = &config.led2Id;
    112          
    113          
    114          volatile uint16_t tasksWDT = 0;
    115          /* PRIVATE FUNCTION PROTOTYPES -----------------------------------------------*/
    116          
    117          //static void OsStackPaint(OS_STK *stk, unsigned short size);
    118          //static unsigned short OsStackCheck(OS_STK *stk);
    119          /* PRIVATE FUNCTION PROTOTYPES -----------------------------------------------*/
    120          
    121          
    122          /*******************************************************************************
    123          * Description : Check FLASH Configuration Struct Checksum
    124          * Input       :
    125          * Return      : Checksum if GOOD, 0 if BAD
    126          *******************************************************************************/
    127          uint16_t CalcConfigChecksum(uint16_t* pConfig, uint16_t len) {
    128              uint16_t checksum = 0xCCCC; // checksum initialization
    129          
    130              // checksum is last half-word in struct
    131              // checksum field not included in checksum
    132              for (uint16_t i = 0; i < len/2; i++) {
    133                  checksum ^= (i ^ *pConfig++);
    134              }
    135          
    136              return checksum;
    137          }
    138          
    139          /* PUBLIC FUNCTION PROTOTYPES ------------------------------------------------*/
    140          //volatile       uint8_t buf[64/*sizeof(config_t)*/];
    141          uint8_t loop = 1;
    142          
    143          /*******************************************************************************
    144          * Description    : Main routine.
    145          * Input          : -
    146          * Return         : -
    147          *******************************************************************************/
    148          void  main(void) {
    149          
    150          #ifdef BOOTLOADER
    151              NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0xC000);
    152          #endif
    153          
    154              SysTick_Config(SystemCoreClock / 1000); // SysTick Interrupt Freq = (1/1000)s = 1ms
    155          
    156          #ifdef CIRCULAR_LOG
    157              memset((void*) log, 0, LOG_SIZE);
    158          #endif
    159          
    160                HwI2CInit();
    161          
    162                if (RCC_GetFlagStatus(RCC_FLAG_IWDGRST) == SET) {
    163                  RCC_ClearFlag();
    164                }
    165                // Read EEPROM_BEACON_FLAG_ADDRESS - if it is not 0xFF, write 0xFF - this flag is used by
    166                // bootloader - when it is 0xFE, bootloader stays in bootloader when connected by USB
    167                // used by "Jump to bootloader" CSM command
    168                uint8_t jumpToMain;
    169                I2C_EE_BufferRead((uint8_t*) &jumpToMain, EEPROM_BEACON_FLAG_ADDRESS, 1);
    170                if (jumpToMain != 0xFE) {
    171                  jumpToMain = 0xFE;
    172                  I2C_EE_BufferWrite((uint8_t*) &jumpToMain, EEPROM_BEACON_FLAG_ADDRESS, 1);
    173                }
    174          
    175                   LoadConfig(&config);
    176          
    177              whole_time_adjust = config.time_adjust/10;
    178              part_time_adjust = config.time_adjust%10;
    179          
    180              if (config.frameCountNoSync == 0xFFFF) {
    181                config.frameCountNoSync = DEFAULT_FRAME_COUNT_NO_SYNC;
    182              }
    183          
    184              CoInitOS();
    185          
    186              __enable_interrupt();
    187          
    188              semRFRxFrames = CoCreateSem (0, 127, EVENT_SORT_TYPE_FIFO);   //Number of RF frames received in Rx-FIFO. It is notified by RX_FRM_DONE interrupt
    189              assert(semRFRxFrames != E_CREATE_FAIL);
    190          
    191              semInkUI = CoCreateSem(1,1,EVENT_SORT_TYPE_PRIO); //buttons are more important than stringer indications
    192              assert(semInkUI != E_CREATE_FAIL);
    193          
    194              HwPeriphInit();
    195              DAC_SetChannel2Data(DAC_Align_12b_R, config.ledDAC);
    196          
    197              GetARM_UUID();
    198          
    199              RELOAD_WATCHDOG
    200          #ifndef STDIO_TO_USART
    201                USBD_Init(&USB_OTG_dev,
    202                      USB_OTG_FS_CORE_ID,
    203                      &USR_desc,
    204                      &USBD_CDC_cb,
    205                      &USR_cb);
    206          
    207              RELOAD_WATCHDOG
    208          #endif
    209          
    210          #ifndef STM3210C_EVAL
    211              RadioInit(config.panId, config.mySrcAddr, config.rfChan, config.TestMode);
    212              init_ledshunt();
    213              init_coosi2c();
    214              HwI2CInterruptInit();
    215              init_coos_eink();
    216          #endif
    217          
    218              flagIMUNewData = 	CoCreateFlag(0, 0);    	// Manual-reset, flag cleared
    219              flagIMU_G_DRDY = 	CoCreateFlag(1, 0);    	// auto-reset, flag cleared
    220              flagRadioTxReq = 	CoCreateFlag(1, 0);    	// auto-reset, flag cleared
    221              flagIMUTimeToSend   = CoCreateFlag(1, 0); 	// auto-reset, flag cleared
    222              flagRadioCCA = 		CoCreateFlag(1, 0);
    223              flagIMUDataReady    = CoCreateFlag(1, 0); 	// auto-reset, flag clear
    224              flagLEDSync         = CoCreateFlag(0, 0);   // Manual-reset, flag clear
    225              flagEInk_RDY        = CoCreateFlag(1, 0);   // auto-reset, flag clear
    226              flagEInk_DMA_Done   = CoCreateFlag(0, 0);   // manual-reset, flag clear
    227              flagBtn_UI          = CoCreateFlag(0, 0);   //manual-reset, flag clear
    228              flagLED_UI          = CoCreateFlag(0, 0);   //manual-reset, flag clear
    229              flagTimeout_UI      = CoCreateFlag(0, 0);   //manual-reset flag clear
    230              flagUSBdata_UI      = CoCreateFlag(0, 0);   //manual-reset flag clear
    231              // Task1: Process and Send each new IMU data sample
    232              task1Id = CoCreateTaskEx(Task1, (void*)0, 1, &task1Stack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    233          
    234          #ifndef STM3210C_EVAL
    235              // TaskRadioRx: Process Incoming Radio Packets
    236              taskRadioRxId 	= CoCreateTaskEx(TaskRadioRx, (void*)0, 2, &taskRadioRxStack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    237              // Task3: RF Chan Scan, then Monitor GPO_PWRON Power Switch
    238              task3Id 		= CoCreateTask  (Task3, (void*)0, 0, &task3Stack[OS_STACK_SIZE-1], OS_STACK_SIZE);
    239          #endif
    240              // TaskConfig: Implements Simple Text Command Console
    241              taskConfigId 	= CoCreateTaskEx(TaskConfig, (void*)0, 9, &task4Stack[OS_STACK_SIZE-1], OS_STACK_SIZE,(uint32_t)0, (uint32_t)0);
    242              // TaskRadioTx: Manage Outgoing (TX) Packet Queue. Highest priority
    243              taskRadioTxId 	= CoCreateTask  (TaskRadioTx, (void*)0, 0, &taskRadioTxStack[OS_STACK_SIZE-1], OS_STACK_SIZE);
    244          
    245              // A to D battery monitor//
    246              task8Id 		= CoCreateTask  (Task8, (void*)0, 7, &task8Stack[OS_STACK_SIZE-1], OS_STACK_SIZE);
    247          
    248              // IMU Data Read task
    249              taskIMUGId      = CoCreateTaskEx(TaskIMU_G, (void*)0, 1/*3*/, &taskIMU_G_Stack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    250              // IRLed detection task
    251              taskLEDId       = CoCreateTaskEx(TaskLED, (void*)0,6, &taskLED_Stack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    252          
    253              // UI state machine task
    254              taskUIId        = CoCreateTaskEx(TaskUI, (void*)0,8, &taskUI_Stack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    255              WDTimerInit();    // Init th WD timer
    256          
    257              CoStartOS();
    258          
    259              while (1);
    260          }
    261          
    262          #if (defined USE_MY_ASSERT) || (defined USE_FULL_ASSERT)
    263          uint8_t assert_loop = 1;
    264          /*******************************************************************************
    265          * Description    : Reports the name of the source file and the source line number
    266          *                  where the assert error has occurred.
    267          * Input          :
    268          * Return         : -
    269          *******************************************************************************/
    270          void assert_failed(uint8_t *file, uint32_t line) {
    271              asserted = 1;
    272              while (assert_loop)
    273              {
    274                  RELOAD_WATCHDOG
    275                  TRACE("!ASSERT FAILED! @%d:%s\n\r", line, file);
    276                  TRACE("  %s\n\r", file);
    277                  TRACE("  %d\n\r", line);
    278                  HwWait(5000);
    279                  
    280                  HwWait(5000);
    281              }
    282              assert_loop = 1;
    283              asserted = 0;
    284              return;
    285          }
    286          #endif
    287          
    288          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  CalcConfigChecksum
        0  NVIC_SetPriority
        8  SysTick_Config
              8 -> NVIC_SetPriority
       16  assert_failed
             16 -> HwWait
             16 -> IWDG_ReloadCounter
             16 -> TRACE
        8  main
              8 -> CoCreateFlag
              8 -> CoCreateSem
              8 -> CoInitOS
              8 -> CoStartOS
              8 -> CreateTask
              8 -> DAC_SetChannel2Data
              8 -> GetARM_UUID
              8 -> HwI2CInit
              8 -> HwI2CInterruptInit
              8 -> HwPeriphInit
              8 -> I2C_EE_BufferRead
              8 -> I2C_EE_BufferWrite
              8 -> IWDG_ReloadCounter
              8 -> LoadConfig
              8 -> NVIC_SetVectorTable
              8 -> RCC_ClearFlag
              8 -> RCC_GetFlagStatus
              8 -> RadioInit
              8 -> SysTick_Config
              8 -> USBD_Init
              8 -> WDTimerInit
              8 -> assert_failed
              8 -> init_coos_eink
              8 -> init_coosi2c
              8 -> init_ledshunt
              8 -> memset
       16  memset
             16 -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "  %d\n\r">
       8  ?<Constant "  %s\n\r">
      28  ?<Constant "!ASSERT FAILED! @%d:%s\n\r">
     112  ?<Constant "C:\\Users\\kmak\\Documen...">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_29
       4  ??DataTable3_3
       4  ??DataTable3_30
       4  ??DataTable3_31
       4  ??DataTable3_32
       4  ??DataTable3_33
       4  ??DataTable3_34
       4  ??DataTable3_35
       4  ??DataTable3_36
       4  ??DataTable3_37
       4  ??DataTable3_38
       4  ??DataTable3_39
       4  ??DataTable3_4
       4  ??DataTable3_40
       4  ??DataTable3_41
       4  ??DataTable3_42
       4  ??DataTable3_43
       4  ??DataTable3_44
       4  ??DataTable3_45
       4  ??DataTable3_46
       4  ??DataTable3_47
       4  ??DataTable3_48
       4  ??DataTable3_49
       4  ??DataTable3_5
       4  ??DataTable3_50
       4  ??DataTable3_51
       4  ??DataTable3_52
       4  ??DataTable3_53
       4  ??DataTable3_54
       4  ??DataTable3_55
       4  ??DataTable3_56
       4  ??DataTable3_57
       4  ??DataTable3_58
       4  ??DataTable3_59
       4  ??DataTable3_6
       4  ??DataTable3_60
       4  ??DataTable3_61
       4  ??DataTable3_62
       4  ??DataTable3_63
       4  ??DataTable3_64
       4  ??DataTable3_65
       4  ??DataTable3_66
       4  ??DataTable3_67
       4  ??DataTable3_68
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      42  CalcConfigChecksum
      38  NVIC_SetPriority
      50  SysTick_Config
    1524  USB_OTG_dev
      90  assert_failed
       1  assert_loop
       1  asserted
       4  firmwareVersion
       1  flagBtn_UI
       1  flagEInk_DMA_Done
       1  flagEInk_RDY
       1  flagIMUDataReady
       1  flagIMUNewData
       1  flagIMUTimeToSend
       1  flagIMU_G_DRDY
       1  flagLEDSync
       1  flagLED_UI
       1  flagRadioCCA
       1  flagRadioTxReq
       1  flagTimeout_UI
       1  flagUSBdata_UI
       4  led0Id
       4  led1Id
       4  led2Id
       1  loop
     632  main
      22  memset
       1  semInkUI
       1  semRFRxFrames
       1  task1Id
    1024  task1Stack
       1  task3Id
    1024  task3Stack
    1024  task4Stack
       1  task8Id
    1024  task8Stack
       1  taskConfigId
       1  taskIMUGId
    1024  taskIMU_G_Stack
       1  taskLEDId
    1024  taskLED_Stack
       1  taskRadioRxId
    1024  taskRadioRxStack
       1  taskRadioTxId
    1024  taskRadioTxStack
       1  taskUIId
    1024  taskUI_Stack
       2  tasksWDT
       1  watchdog_active

 
 10 761 bytes in section .bss
      9 bytes in section .data
    172 bytes in section .rodata
  1 150 bytes in section .text
 
  1 128 bytes of CODE  memory (+ 22 bytes shared)
    172 bytes of CONST memory
 10 770 bytes of DATA  memory

Errors: none
Warnings: none
