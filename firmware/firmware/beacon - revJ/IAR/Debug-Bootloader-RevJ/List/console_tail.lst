###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     26/Oct/2019  13:14:12 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source        #
#                    Code\BLKT-01 Beacon\Source\common\console_tail.cpp       #
#    Command line =  "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\common\console_tail.cpp" -D   #
#                    BEACON_APP -D USE_STDPERIPH_DRIVER -D STM32F10X_CL -D    #
#                    COOS -D USE_MY_ASSERT -D _DEBUG -D BOOTLOADER -D         #
#                    EE_M24C02 -D TASKS_PROFILE -D BATTERY_CHECK -D           #
#                    CCA_EN_NO -D NEW_BEACON -D USE_TIM4 -D WDT_ENABLE -D     #
#                    OLD_CONFIG -D CIRCULAR_LOG -D BC_HW_REVJ -lcN            #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\List\" -o                 #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\Obj\" --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\App\" -I "C:\Users\kmak\Documents\Cortex_Git #
#                    \BLKT-01\Source Code\BLKT-01                             #
#                    Beacon\Source\firmware\beacon -                          #
#                    revJ\IAR\..\..\common\CMSIS\CM3\DeviceSupport\ST\STM32F1 #
#                    0x\" -I "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Sour #
#                    ce Code\BLKT-01 Beacon\Source\firmware\beacon -          #
#                    revJ\IAR\..\..\common\STM32F10x_StdPeriph_Driver\inc\"   #
#                    -I "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\CoOS\kernel\" -I                   #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\CoOS\portable\" -I                 #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\..\common\" -I                            #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\USB-Device-CDC\" -I                #
#                    "C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source       #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\..\..\common\" -I "C:\Users\kmak\Documents\Cort #
#                    ex_Git\BLKT-01\Source Code\BLKT-01                       #
#                    Beacon\Source\firmware\beacon - revJ\IAR\" -On           #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source        #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\List\console_tail.lst     #
#    Object file  =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source        #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    revJ\IAR\Debug-Bootloader-RevJ\Obj\console_tail.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\common\console_tail.cpp
      1          #include <string.h>
      2          #include <stdio.h>
      3          
      4          #include "console_tail.h"
      5          
      6          void strrev(char *target, const char* source, size_t size);				// reverse a string. Not C null terminated
      7          
      8          uint16_t ConsoleChecksum(uint16_t sum, const uint8_t* buf, uint16_t size) {
      9          	for (size_t i = 0; i < size; ++i) {
     10          		sum += *buf;
     11          		++buf;
     12          	}
     13          
     14          	return sum;
     15          }
     16          
     17          // Stringify macro into string literal
     18          #define stringify(a) _stringify(a)
     19          #define _stringify(a) #a
     20          
     21          uint8_t ValidateCommandLine(const char* source, size_t size) {
     22          	static char reverStr[768];		// Firmware has very small stack. so do not define them on stack
     23          	static char buf[16];
     24          	static char tailLengthStr[TailLenSize + 1];
     25          	static int tailLength;
     26                  
     27          	//============   Special case, we don't validate base-64 packet   ============
     28          	if (size < 5) {
     29          		return 0;
     30          	}
     31          
     32          	if (memcmp(source, "U 0 0", 5) == 0) {
     33          		return 1;
     34          	}
     35          	//=============================================================================
     36          
     37          	if (size < sizeof(struct TAIL_FIXED_STRUCT0) + sizeof(struct TAIL_FIXED_STRUCT1) + 1) {		// 1 means "splitter"
     38          		return 0;
     39          	}
     40          
     41          	strrev(reverStr, source, size);
     42          
     43          	struct TAIL_FIXED_STRUCT0* tail0 = (struct TAIL_FIXED_STRUCT0*)(reverStr);
     44          	struct TAIL_FIXED_STRUCT1* tail1 = (struct TAIL_FIXED_STRUCT1*)(reverStr + sizeof(struct TAIL_FIXED_STRUCT0));
     45          
     46          	if (memcmp(tail0->signature, TailSignatureStr, TailSignatureSize) != 0) {
     47          		return 0;
     48          	}
     49          
     50          	if (tail0->version < TailVersion) {	// version compatibility
     51          		return 0;
     52          	}
     53          
     54          	uint16_t sum = ConsoleChecksum(0, (uint8_t*)reverStr + sizeof(struct TAIL_FIXED_STRUCT0), size - sizeof(struct TAIL_FIXED_STRUCT0));
     55          	
     56          	sprintf(buf, "%0" stringify(TailCheckSumSize) "X", sum);
     57          	if (strlen(buf) != TailCheckSumSize) {
     58          		return 0;
     59          	}
     60          
     61          	if (memcmp(buf, tail0->checksum, TailCheckSumSize) != 0) {
     62          		return 0;
     63          	}
     64          
     65          	memcpy(tailLengthStr, tail1->tailLength, TailLenSize);
     66          	tailLengthStr[TailLenSize] = 0;
     67          
     68          	int num = sscanf(tailLengthStr, "%d", &tailLength);
     69          
     70          	if (num < 1) {
     71          		return 0;
     72          	}
     73          
     74          	if (tailLength < (sizeof(struct TAIL_FIXED_STRUCT0) + sizeof(struct TAIL_FIXED_STRUCT1))) {
     75          		return 0;
     76          	}
     77          
     78          	if (tailLength > size) {
     79          		return 0;
     80          	}
     81          
     82          	if (reverStr[tailLength] != ' ') {
     83          		return 0;
     84          	}
     85          
     86          	return 1;
     87          }
     88          
     89          // reverse a string. Not C null terminated
     90          void strrev(char *target, const char* source, size_t size) {
     91          	for (size_t i = 0; i < size; ++i) {
     92          		target[i] = source[size - 1 - i];
     93          	}
     94          }
     95          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  ConsoleChecksum
       24  ValidateCommandLine
             24 -> ConsoleChecksum
             24 -> memcmp
             24 -> memcpy
             24 -> sprintf
             24 -> sscanf
             24 -> strlen
             24 -> strrev
       16  memcpy
             16 -> __aeabi_memcpy
        4  strrev


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%04X">
       4  ?<Constant "%d">
       8  ?<Constant "CaSt">
       8  ?<Constant "U 0 0">
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable0_3
       4  ??DataTable0_4
       4  ??DataTable0_5
       4  ??DataTable0_6
       4  ??DataTable0_7
       4  ??DataTable0_8
      26  ConsoleChecksum
     230  ValidateCommandLine
      16  buf
      22  memcpy
     768  reverStr
      24  strrev
       4  tailLength
       4  tailLengthStr

 
 792 bytes in section .bss
  28 bytes in section .rodata
 338 bytes in section .text
 
 316 bytes of CODE  memory (+ 22 bytes shared)
  28 bytes of CONST memory
 792 bytes of DATA  memory

Errors: none
Warnings: none
