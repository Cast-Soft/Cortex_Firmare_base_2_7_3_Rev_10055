###############################################################################
#                                                                             #
#     IAR Assembler V6.40.1.53790/W32 for ARM 26/Oct/2019  13:14:16           #
#     Copyright 1999-2012 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\firmware\common\CoOS\portable\portForM3.asm#
#           List file     =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\firmware\beacon - revJ\IAR\Debug-Bootloader-RevJ\List\portForM3.lst#
#           Object file   =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\firmware\beacon - revJ\IAR\Debug-Bootloader-RevJ\Obj\portForM3.o#
#           Command line  =  C:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\firmware\common\CoOS\portable\portForM3.asm #
#                            -OC:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\firmware\beacon - revJ\IAR\Debug-Bootloader-RevJ\Obj\ #
#                            -s+ -M<> -w+ -r                                  #
#                            -LC:\Users\kmak\Documents\Cortex_Git\BLKT-01\Source Code\BLKT-01 Beacon\Source\firmware\beacon - revJ\IAR\Debug-Bootloader-RevJ\List\ #
#                            -cM -t8 --cpu Cortex-M3 --fpu None               #
#                                                                             #
###############################################################################

    1                           ;*********************************************
                                **********************************
    2                           ;                         PUBLIC FUNCTIONS
    3                           ;*********************************************
                                **********************************
    4                                           
    5                                   ; Functions declared in this
                                 file
    6                                   PUBLIC  Inc8              ; U8  
                                 Inc8(U8 *data);
    7                                   PUBLIC  Dec8              ; U8  
                                 Dec8(U8 *data); 
    8                                   PUBLIC  IRQ_ENABLE_RESTORE; void
                                 IRQ_ENABLE_RESTORE(void) ;
    9                             PUBLIC  IRQ_DISABLE_SAVE  ; void IRQ_DISABLE
                                _SAVE(void) ; 
   10                                   PUBLIC  SwitchContext     ; void
                                 SwitchContext(void); 
   11                                   PUBLIC  PendSV_Handler    ; void
                                 PendSV_Handler(void);
   12                                   PUBLIC  SetEnvironment    ; void
                                 SetEnvironment(void);
   13                           
   14                                   EXTERN  TCBRunning
   15                                   EXTERN  TCBNext
   16                                   EXTERN  OSSchedLock
   17                           
   18                           ;*********************************************
                                **********************************
   19                           ;                              EQUATES
   20                           ;*********************************************
                                **********************************       
                                 
   21                           NVIC_INT_CTRL   EQU     0xE000ED04      ;
                                 Interrupt control state register
   22                           NVIC_SYSPRI2    EQU     0xE000ED22      ;
                                 System priority register (PendSV 14)
   23                           NVIC_PENDSV_PRI EQU           0xFF      ;
                                 PendSV priority value (Lowest)
   24                           NVIC_PENDSVSET  EQU     0x10000000      ;
                                 Value to trigger PendSV exception
   25                           
   26                           
   27                               RSEG    CODE:CODE(2)
   28                               thumb
   29                           
   30                           
   31                           ;U8 Inc8(U8 *data);
   32                           Inc8
   33    00000000 02B4              PUSH    {R1}
   34    00000002 72B6              CPSID   I
   35    00000004 0178              LDRB    R1,[R0]
   36    00000006 0131              ADDS    R1,#1
   37    00000008 0170              STRB    R1,[R0]
   38    0000000A 62B6              CPSIE   I
   39    0000000C 0139              SUBS    R1,#1
   40    0000000E 0800              MOVS    R0,R1
   41    00000010 02BC              POP     {R1}
   42    00000012 7047              BX      LR  
   43                           
   44                           
   45                           ;U8 Dec8 (U8 *data);
   46                           Dec8
   47    00000014 02B4              PUSH    {R1}
   48    00000016 72B6              CPSID   I
   49    00000018 0178              LDRB    R1,[R0]
   50    0000001A 0139              SUBS    R1,#1
   51    0000001C 0170              STRB    R1,[R0]
   52    0000001E 62B6              CPSIE   I
   53    00000020 0800              MOVS    R0,R1
   54    00000022 02BC              POP     {R1}
   55    00000024 7047              BX      LR
   56                           
   57                           IRQ_ENABLE_RESTORE
   58    00000026 62B6              CPSIE   I
   59    00000028 7047              BX      LR
   60                                   
   61                           IRQ_DISABLE_SAVE        
   62    0000002A 72B6                    CPSID   I
   63    0000002C 7047              BX      LR
   64                               
   65                           SetEnvironment
   66    0000002E 1C38              SUBS    R0, #28
   67    00000030 80F30988          MSR     PSP, R0
   68    00000034 7047              BX      LR  
   69                            
   70                                   
   71                           ; void SwitchContext(void)
   72                           SwitchContext
   73    00000036 0D48              LDR     R0, =NVIC_INT_CTRL  ; Trigger the
                                                                 PendSV
                                                                 exception
                                                                 (causes
                                                                 context
                                                                 switch)
   74    00000038 0D49              LDR     R1, =NVIC_PENDSVSET
   75    0000003A 0160              STR     R1, [R0]
   76    0000003C 7047              BX      LR
   77                           
   78                           
   79                           ; void PendSV_Handler(void)
   80                           PendSV_Handler
   81    0000003E 0D4B              LDR     R3,=TCBRunning
   82    00000040 1968              LDR     R1,[R3]             ; R1 == running
                                                                 tcb
   83                               
   84    00000042 0D4A              LDR     R2,=TCBNext
   85    00000044 1268              LDR     R2,[R2]             ; R2 == next
                                                                 tcb
   86                               
   87    00000046 9142              CMP     R1,R2
   88    00000048 0AD0              BEQ     exitPendSV              
   89                               
   90    0000004A EFF30980          MRS     R0, PSP             ; Get PSP point
                                                                 (can not use
                                                                 PUSH,in ISR,SP
                                                                 is MSP
                                                                 )
   91    0000004E 20E9F00F          STMDB   R0!,{R4-R11}        ; Store
                                                                 r4-r11,r0 -=
                                                                 regCnt * 4,r0
                                                                 is new stack
                                                                 
   92                                                           ; top point
                                 (addr h->l r11,r10,...,r5,r4)
   93    00000052 0860              STR     R0,[R1]             ; Save orig
                                                                 PSP
   94                                 
   95    00000054 1A60              STR     R2, [R3]            ; TCBRunning  =
                                                                 TCBNext;
   96    00000056 1068              LDR     R0, [R2]            ; Get SP of
                                                                 task that be
                                                                 switch
                                                                 into.
   97    00000058 B0E8F00F          LDMIA   R0!,{R4-R11}        ; POP
                                                                 {R4-R11},R0 +=
                                                                 regCnt *
                                                                 4
   98    0000005C 80F30988          MSR     PSP, R0             ; Mov new stack
                                                                 point to
                                                                 PSP
   99                             
  100                           exitPendSV  
  101    00000060 064B              LDR     R3,=OSSchedLock
  102    00000062 0020              MOVS    R0, #0x0
  103    00000064 1870              STRB    R0, [R3]
  104    00000066 4EF0040E          ORR     LR, LR, #0x04       ; Ensure
                                                                 exception
                                                                 return uses
                                                                 process
                                                                 stack
  105    0000006A 7047              BX      LR                  ; Exit
                                                                 interrupt
  106                               
  107                               END 
  107.1                                  TABLE
  107.2  0000006C 04ED00E0              Reference on line 73 
  107.3  00000070 00000010              Reference on line 74 
  107.4  00000074 ........              Reference on line 81 
  107.5  00000078 ........              Reference on line 84 
  107.6  0000007C ........              Reference on line 101 
  107.7                                 END (including table)
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 128         #
##############################



