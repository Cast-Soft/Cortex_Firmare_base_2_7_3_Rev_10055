###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     17/Apr/2019  15:49:09 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\App\main.c                                          #
#    Command line =  "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\App\main.c" -D BEACON_APP -D USE_STDPERIPH_DRIVER   #
#                    -D STM32F10X_CL -D COOS -D USE_MY_ASSERT -D BC_HW_REVJ   #
#                    -D _DEBUG -D BOOTLOADER -D EE_M24C02 -D TASKS_PROFILE    #
#                    -D BATTERY_CHECK -D CCA_EN_NO -D NEW_BEACON -D USE_TIM4  #
#                    -D WDT_ENABLE -D OLD_CONFIG -D CIRCULAR_LOG -D           #
#                    msgmethod1 -lcN "C:\Users\User\Documents\Cortex_git\BLKT #
#                    -01.git\Source Code\BLKT-01                              #
#                    Beacon\Source\firmware\beacon -                          #
#                    Copy\IAR\Debug-Bootloader\List\" -o                      #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\" --no_cse --no_unroll     #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.gi #
#                    t\Source Code\BLKT-01 Beacon\Source\firmware\beacon -    #
#                    Copy\IAR\..\App\" -I "C:\Users\User\Documents\Cortex_git #
#                    \BLKT-01.git\Source Code\BLKT-01                         #
#                    Beacon\Source\firmware\beacon -                          #
#                    Copy\IAR\..\..\common\CMSIS\CM3\DeviceSupport\ST\STM32F1 #
#                    0x\" -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\ #
#                    Source Code\BLKT-01 Beacon\Source\firmware\beacon -      #
#                    Copy\IAR\..\..\common\STM32F10x_StdPeriph_Driver\inc\"   #
#                    -I "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Sourc #
#                    e Code\BLKT-01 Beacon\Source\firmware\beacon -           #
#                    Copy\IAR\..\..\common\CoOS\kernel\" -I                   #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\CoOS\portable\" -I                 #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\..\common\" -I                            #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\USB-Device-CDC\" -I                #
#                    "C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source   #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\..\..\common\" -I "C:\Users\User\Documents\Cort #
#                    ex_git\BLKT-01.git\Source Code\BLKT-01                   #
#                    Beacon\Source\firmware\beacon - Copy\IAR\" -On           #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.4\arm\CMSIS\Include\"       #
#    List file    =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\List\main.lst                  #
#    Object file  =  C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source    #
#                    Code\BLKT-01 Beacon\Source\firmware\beacon -             #
#                    Copy\IAR\Debug-Bootloader\Obj\main.o                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\User\Documents\Cortex_git\BLKT-01.git\Source Code\BLKT-01 Beacon\Source\firmware\beacon - Copy\App\main.c
      1          /********************  All title and rights are owned by  *********************
      2          *******  the CAST Group of Companies Inc. or licensors thereto. ***************
      3          *******************************************************************************
      4          * File Name          : main.c
      5          * Author             : ?
      6          * Version            : V1.0
      7          * Date               : 6/2/2011
      8          * Description        : Main Application for BlackTrax:Beacon
      9          *******************************************************************************/
     10          
     11          /*
     12              LED1 : Toggle on RF Packet TX
     13              LED2 : Toggle on 50x RF Packet TX'es
     14              LED3 : Toggle on RF Packet RX
     15              LED4 : Toggle on 50x RF Packet RX'es
     16          */
     17          
     18          /* INCLUDES ------------------------------------------------------------------*/
     19          
     20          #include "hardware.h"
     21          #include "CoOS.h"
     22          #include "tasks.h"
     23          #include "basic_rf.h"
     24          #ifndef STDIO_TO_USART
     25          #include "usb_regs.h"
     26          #include "usbd_cdc_core.h"
     27          #include "usbd_usr.h"
     28          #include "usb_conf.h"
     29          #include "usbd_desc.h"
     30          #endif
     31          #include <stdio.h>
     32          #include <string.h>
     33          #include "stm32f10x_dac.h"
     34          #include "stm32f10x_rcc.h"
     35          
     36          #include "i2c_ee.h"
     37          #include "flash_map.h"
     38          #include "config.h"
     39          
     40          /* PRIVATE TYPEDEF -----------------------------------------------------------*/
     41          
     42          /* PRIVATE DEFINES -----------------------------------------------------------*/
     43          
     44          #define FIRMWARE_VERSION "0.6"
     45          
     46          #define OS_STACK_SIZE   256
     47          
     48          /* PRIVATE MACROS ------------------------------------------------------------*/
     49          
     50          /* EXTERN VARIABLES ----------------------------------------------------------*/
     51          extern uint32_t __vector_table;
     52          extern uint8_t bat_slot_numbers;
     53          
     54          /* PRIVATE VARIABLES ---------------------------------------------------------*/
     55          
     56          __ALIGN_BEGIN USB_OTG_CORE_HANDLE    USB_OTG_dev __ALIGN_END ;
     57          
     58          static OS_STK task1Stack[OS_STACK_SIZE];
     59          static OS_STK taskRadioRxStack[OS_STACK_SIZE];
     60          static OS_STK task3Stack[OS_STACK_SIZE];
     61          static OS_STK task4Stack[OS_STACK_SIZE];
     62          static OS_STK taskRadioTxStack[OS_STACK_SIZE];
     63          static OS_STK task8Stack[OS_STACK_SIZE];
     64          static OS_STK taskIMU_A_Stack[OS_STACK_SIZE];
     65          static OS_STK taskIMU_G_Stack[OS_STACK_SIZE];
     66          /* PUBLIC VARIABLES ----------------------------------------------------------*/
     67          
     68          #ifdef WDT_ENABLE
     69          uint8_t  watchdog_active = 1;
     70          #else
     71          uint8_t  watchdog_active = 0;
     72          #endif
     73          
     74          uint8_t asserted;
     75          const char firmwareVersion[] = FIRMWARE_VERSION;
     76          
     77          OS_TID  task1Id;
     78          OS_TID  taskRadioRxId;
     79          OS_TID  task3Id;
     80          OS_TID  taskConfigId;
     81          OS_TID  taskRadioTxId;
     82          OS_TID  task8Id;
     83          OS_TID  taskIMUGId;
     84          
     85          OS_FlagID   flagIMUNewData = 0xFF;
     86          OS_FlagID   flagIMU_G_DRDY = 0xFF;
     87          OS_FlagID   flagRadioTxReq = 0xFF;
     88          OS_FlagID   flagIMUTimeToSend = 0xFF;
     89          OS_FlagID   flagRadioCCA = 0xFF;
     90          OS_FlagID   flagBTNNewData = 0xFF;
     91          
     92          OS_FlagID   flagIMUDataReady = 0xFF;
     93          OS_FlagID   flagBtnDataReady = 0xFF;
     94          OS_FlagID   flagBatDataReady = 0xFF;
     95          OS_FlagID   flagLEDDataReady = 0xFF;
     96          
     97          OS_EventID semRFRxFrames;   // Number of RF frames received in Rx-FIFO. It is notified by RX_FRM_DONE interrupt
     98          
     99          uint8_t* const led0Id = &config.led0Id;
    100          uint8_t* const led1Id = &config.led1Id;
    101          uint8_t* const led2Id = &config.led2Id;
    102          
    103          tBtn_State btnA;
    104          tBtn_State btnB;
    105          
    106          volatile uint16_t tasksWDT = 0;
    107          /* PRIVATE FUNCTION PROTOTYPES -----------------------------------------------*/
    108          
    109          //static void OsStackPaint(OS_STK *stk, unsigned short size);
    110          //static unsigned short OsStackCheck(OS_STK *stk);
    111          /* PRIVATE FUNCTION PROTOTYPES -----------------------------------------------*/
    112          
    113          
    114          /*******************************************************************************
    115          * Description : Check FLASH Configuration Struct Checksum
    116          * Input       :
    117          * Return      : Checksum if GOOD, 0 if BAD
    118          *******************************************************************************/
    119          uint16_t CalcConfigChecksum(uint16_t* pConfig, uint16_t len) {
    120              uint16_t checksum = 0xCCCC; // checksum initialization
    121          
    122              // checksum is last half-word in struct
    123              // checksum field not included in checksum
    124              for (uint16_t i = 0; i < len/2; i++) {
    125                  checksum ^= (i ^ *pConfig++);
    126              }
    127          
    128              return checksum;
    129          }
    130          
    131          /* PUBLIC FUNCTION PROTOTYPES ------------------------------------------------*/
    132          //volatile       uint8_t buf[64/*sizeof(config_t)*/];
    133          uint8_t loop = 1;
    134          
    135          /*******************************************************************************
    136          * Description    : Main routine.
    137          * Input          : -
    138          * Return         : -
    139          *******************************************************************************/
    140          void  main(void) {
    141          
    142          #ifdef BOOTLOADER
    143              NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0xC000);
    144          #endif
    145          
    146              SysTick_Config(SystemCoreClock / 1000); // SysTick Interrupt Freq = (1/1000)s = 1ms
    147          
    148          #ifdef CIRCULAR_LOG
    149              memset((void*) log, 0, LOG_SIZE);
    150          #endif
    151          
    152                HwI2CInit();
    153          
    154                if (RCC_GetFlagStatus(RCC_FLAG_IWDGRST) == SET) {
    155                  RCC_ClearFlag();
    156                }
    157                // Read EEPROM_BEACON_FLAG_ADDRESS - if it is not 0xFF, write 0xFF - this flag is used by
    158                // bootloader - when it is 0xFE, bootloader stays in bootloader when connected by USB
    159                // used by "Jump to bootloader" CSM command
    160                uint8_t jumpToMain;
    161                I2C_EE_BufferRead((uint8_t*) &jumpToMain, EEPROM_BEACON_FLAG_ADDRESS, 1);
    162                if (jumpToMain != 0xFE) {
    163                  jumpToMain = 0xFE;
    164                  I2C_EE_BufferWrite((uint8_t*) &jumpToMain, EEPROM_BEACON_FLAG_ADDRESS, 1);
    165                }
    166          
    167                   LoadConfig(&config);
    168          
    169              whole_time_adjust = config.time_adjust/10;
    170              part_time_adjust = config.time_adjust%10;
    171          
    172              if (config.frameCountNoSync == 0xFFFF) {
    173                config.frameCountNoSync = DEFAULT_FRAME_COUNT_NO_SYNC;
    174              }
    175          
    176              CoInitOS();
    177          
    178              __enable_interrupt();
    179          
    180              semRFRxFrames = CoCreateSem (0, 127, EVENT_SORT_TYPE_FIFO);   //Number of RF frames received in Rx-FIFO. It is notified by RX_FRM_DONE interrupt
    181              assert(semRFRxFrames != E_CREATE_FAIL);
    182          
    183              HwPeriphInit();
    184              //HwLEDOff(LED2);
    185              DAC_SetChannel2Data(DAC_Align_12b_R, config.ledDAC);
    186          
    187              GetARM_UUID();
    188          
    189              RELOAD_WATCHDOG
    190          #ifndef STDIO_TO_USART
    191                USBD_Init(&USB_OTG_dev,
    192                      USB_OTG_FS_CORE_ID,
    193                      &USR_desc,
    194                      &USBD_CDC_cb,
    195                      &USR_cb);
    196          
    197              RELOAD_WATCHDOG
    198          #endif
    199          
    200          
    201          #ifdef BC_HW_REVJ
    202          	IMUInit();
    203              btnA.state = BTNSTATE_OFF;
    204              btnB.state = BTNSTATE_OFF;
    205          #endif
    206          
    207          #ifndef STM3210C_EVAL
    208              RadioInit(config.panId, config.mySrcAddr, config.rfChan, config.TestMode);
    209          #endif
    210          
    211              flagBTNNewData =    CoCreateFlag(0, 0);     // Manual-reset, flag cleared
    212              flagIMUNewData = 	CoCreateFlag(0, 0);    	// Manual-reset, flag cleared
    213              flagIMU_G_DRDY = 	CoCreateFlag(1, 0);    	// auto-reset, flag cleared
    214              flagRadioTxReq = 	CoCreateFlag(1, 0);    	// auto-reset, flag cleared
    215              flagIMUTimeToSend = CoCreateFlag(1, 0); 	// auto-reset, flag cleared
    216              flagRadioCCA = 		CoCreateFlag(1, 0);
    217          
    218              flagIMUDataReady    = CoCreateFlag(0, 0); 	//auto-reset, flag clear
    219              flagBtnDataReady    = CoCreateFlag(0, 0);   //auto-reset, flag clear
    220              flagBatDataReady    = CoCreateFlag(0, 0);   //auto-reset, flag clear
    221              flagLEDDataReady    = CoCreateFlag(0, 0);   //auto-reset, flag clear
    222          
    223              // Task1: Process and Send each new IMU data sample
    224              task1Id = CoCreateTaskEx(Task1, (void*)0, 1, &task1Stack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    225          
    226          #ifndef STM3210C_EVAL
    227              // TaskRadioRx: Process Incoming Radio Packets
    228              taskRadioRxId 	= CoCreateTaskEx(TaskRadioRx, (void*)0, 2, &taskRadioRxStack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    229              // Task3: RF Chan Scan, then Monitor GPO_PWRON Power Switch
    230              task3Id 		= CoCreateTask  (Task3, (void*)0, 0, &task3Stack[OS_STACK_SIZE-1], OS_STACK_SIZE);
    231          #endif
    232              // TaskConfig: Implements Simple Text Command Console
    233              taskConfigId 	= CoCreateTaskEx(TaskConfig, (void*)0, 9, &task4Stack[OS_STACK_SIZE-1], OS_STACK_SIZE,(uint32_t)0, (uint32_t)0);
    234              // TaskRadioTx: Manage Outgoing (TX) Packet Queue. Highest priority
    235              taskRadioTxId 	= CoCreateTask  (TaskRadioTx, (void*)0, 0, &taskRadioTxStack[OS_STACK_SIZE-1], OS_STACK_SIZE);
    236          
    237              // A to D battery monitor//
    238              task8Id 		= CoCreateTask  (Task8, (void*)0, 7, &task8Stack[OS_STACK_SIZE-1], OS_STACK_SIZE);
    239          
    240              // IMU Data Read task
    241          	//  CoCreateTask(TaskIMU_A, (void*)0, 3, &taskIMU_A_Stack[OS_STACK_SIZE-1], OS_STACK_SIZE);
    242              taskIMUGId = CoCreateTaskEx(TaskIMU_G, (void*)0, 1/*3*/, &taskIMU_G_Stack[OS_STACK_SIZE-1], OS_STACK_SIZE, (uint32_t)0, (uint32_t)1);
    243          
    244              WDTimerInit();    // Init th WD timer
    245          
    246              CoStartOS();
    247          
    248              while (1);
    249          }
    250          
    251          #if (defined USE_MY_ASSERT) || (defined USE_FULL_ASSERT)
    252          uint8_t assert_loop = 1;
    253          /*******************************************************************************
    254          * Description    : Reports the name of the source file and the source line number
    255          *                  where the assert error has occurred.
    256          * Input          :
    257          * Return         : -
    258          *******************************************************************************/
    259          void assert_failed(uint8_t *file, uint32_t line) {
    260              asserted = 1;
    261              while (assert_loop)
    262              {
    263                  RELOAD_WATCHDOG
    264                  TRACE("!ASSERT FAILED! @%d:%s\n\r", line, file);
    265                  TRACE("  %s\n\r", file);
    266                  TRACE("  %d\n\r", line);
    267                  //HwLEDOn(LED1); HwLEDOn(LED4); HwLEDOff(LED2); HwLEDOff(LED3);
    268                  HwWait(5000);
    269                  //HwLEDOn(LED2); HwLEDOn(LED3); HwLEDOff(LED1); HwLEDOff(LED4);
    270                  HwWait(5000);
    271              }
    272              assert_loop = 1;
    273              asserted = 0;
    274              return;
    275          }
    276          #endif
    277          
    278          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        4  CalcConfigChecksum
        0  NVIC_SetPriority
        8  SysTick_Config
              8 -> NVIC_SetPriority
       16  assert_failed
             16 -> HwWait
             16 -> IWDG_ReloadCounter
             16 -> TRACE
        8  main
              8 -> CoCreateFlag
              8 -> CoCreateSem
              8 -> CoInitOS
              8 -> CoStartOS
              8 -> CreateTask
              8 -> DAC_SetChannel2Data
              8 -> GetARM_UUID
              8 -> HwI2CInit
              8 -> HwPeriphInit
              8 -> I2C_EE_BufferRead
              8 -> I2C_EE_BufferWrite
              8 -> IMUInit
              8 -> IWDG_ReloadCounter
              8 -> LoadConfig
              8 -> NVIC_SetVectorTable
              8 -> RCC_ClearFlag
              8 -> RCC_GetFlagStatus
              8 -> RadioInit
              8 -> SysTick_Config
              8 -> USBD_Init
              8 -> WDTimerInit
              8 -> assert_failed
              8 -> memset
       16  memset
             16 -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "  %d\n\r">
       8  ?<Constant "  %s\n\r">
      28  ?<Constant "!ASSERT FAILED! @%d:%s\n\r">
     116  ?<Constant "C:\\Users\\User\\Documen...">
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_26
       4  ??DataTable3_27
       4  ??DataTable3_28
       4  ??DataTable3_29
       4  ??DataTable3_3
       4  ??DataTable3_30
       4  ??DataTable3_31
       4  ??DataTable3_32
       4  ??DataTable3_33
       4  ??DataTable3_34
       4  ??DataTable3_35
       4  ??DataTable3_36
       4  ??DataTable3_37
       4  ??DataTable3_38
       4  ??DataTable3_39
       4  ??DataTable3_4
       4  ??DataTable3_40
       4  ??DataTable3_41
       4  ??DataTable3_42
       4  ??DataTable3_43
       4  ??DataTable3_44
       4  ??DataTable3_45
       4  ??DataTable3_46
       4  ??DataTable3_47
       4  ??DataTable3_48
       4  ??DataTable3_49
       4  ??DataTable3_5
       4  ??DataTable3_50
       4  ??DataTable3_51
       4  ??DataTable3_52
       4  ??DataTable3_53
       4  ??DataTable3_54
       4  ??DataTable3_55
       4  ??DataTable3_56
       4  ??DataTable3_57
       4  ??DataTable3_58
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      42  CalcConfigChecksum
      34  NVIC_SetPriority
      50  SysTick_Config
    1524  USB_OTG_dev
      90  assert_failed
       1  assert_loop
       1  asserted
       8  btnA
       8  btnB
       4  firmwareVersion
       1  flagBTNNewData
       1  flagBatDataReady
       1  flagBtnDataReady
       1  flagIMUDataReady
       1  flagIMUNewData
       1  flagIMUTimeToSend
       1  flagIMU_G_DRDY
       1  flagLEDDataReady
       1  flagRadioCCA
       1  flagRadioTxReq
       4  led0Id
       4  led1Id
       4  led2Id
       1  loop
     534  main
      22  memset
       1  semRFRxFrames
       1  task1Id
    1024  task1Stack
       1  task3Id
    1024  task3Stack
    1024  task4Stack
       1  task8Id
    1024  task8Stack
       1  taskConfigId
       1  taskIMUGId
    1024  taskIMU_G_Stack
       1  taskRadioRxId
    1024  taskRadioRxStack
       1  taskRadioTxId
    1024  taskRadioTxStack
       2  tasksWDT
       1  watchdog_active

 
 8 719 bytes in section .bss
    13 bytes in section .data
   176 bytes in section .rodata
 1 008 bytes in section .text
 
   986 bytes of CODE  memory (+ 22 bytes shared)
   176 bytes of CONST memory
 8 732 bytes of DATA  memory

Errors: none
Warnings: 1
